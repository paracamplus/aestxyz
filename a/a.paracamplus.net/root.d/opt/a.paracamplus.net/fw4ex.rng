<?xml version="1.0" encoding="UTF-8"?>
<!--
  -*- coding: utf-8 -*-
  Grammar of the FW4EX project
-->
<!-- =head1 Grammar -->
<!--
  This grammar describes the content of all XML files read or
  generated by the FW4EX system. All these XML documents have a root
  element named C<fw4ex> with a C<version> attribute. 
-->
<!--
  Where an attribute is optional, its default value is specified via
  an annotation belonging to the C<annotation> namespace. 
-->
<!-- =cut -->
<grammar xmlns:annotation="http://paracamplus.org/fw4ex/annotation/1.0" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <ref name="fw4ex"/>
  </start>
  <!-- =pod -->
  <!--
    There are a number of documents used for the various exchanges
    between students, teachers and servers. Students don't have to be
    aware of these documents. Authors should focus on the
    L<exerciseSubmission> document that describes an exercise and,
    possibly, on the structure of the L<jobStudentReport> generated by
    exercises. Deployers (teachers or web programmers) that want to
    connect their site to FW4EX should focus on the L<exerciseContent>
    or L<exerciseStem>, L<jobStudentReport>.
  -->
  <!-- =over -->
  <!-- =item jobSubmission -->
  <!--
    This document is an internal document generated by an acquisition
    server when receiving some files. These files and this XML document
    named C<fw4ex.xml> form a job that is, a tar gzipped file containing
    them all. The C<fw4ex.xml> file gathers who is the student, what
    exercise is targeted, when the files were received. It also
    attributes an UUID to the job. This C<fw4ex.xml> is packed with the
    files sent by the student (in a C<content/> directory) to form the job.
  -->
  <!-- =item jobSubmittedReport -->
  <!--
    This document is the answer of an acquisition server when receiving
    a job submission. This acknowledgement is returned to the student.
    This document contains the information from the L<jobSubmission>
    document. It also returns a C<location> information that is, an URL
    where the grading report will appear. The C<location> value is
    derived from the UUID christening the job.
  -->
  <!-- =item exerciseSubmission -->
  <!--
    This document is an internal document generated when a fresh
    exercise is received by an exercise server. This XML document named
    C<fw4ex.xml> gathers who is the author, when the exercise was
    received, if it is a new version of an old exercise. An UUID is
    given to the exercise that will follow the auto-checking phase of
    the exercise.
  -->
  <!-- =item acquisitionServerState -->
  <!--
    This document describes the state of the acquisition server that is,
    it lists all the jobs that are waiting to be marked on the
    acquisition server. This is an internal document answered by the
    acquisition server to requests formed by administrative servers (and
    mainly the marking driver).
  -->
  <!-- =item exerciseServerState -->
  <!--
    This document describes the state of the exercise server that is, it
    lists all the exercises that are present on the exercise server.
    This is an internal document answered by the exercise server to
    requests formed by administrative servers (and mainly the marking
    driver).
  -->
  <!-- =item jobStudentReport -->
  <!--
    When a job is marked, the grading report is a C<jobStudentReport>
    XML document. It is identified by the job UUID, it contains the text
    (the report) generated by the exercise and, finally, it contains a
    summary of the marking result (the mark, the total mark possible,
    the various dates when the report was generated).
  -->
  <!-- =item jobAuthorReport -->
  <!--
    When a job is marked, it is possible that the programs of the author
    of the exercise generate anomalies. These anomalies may prevent the
    generation of the report to the student. These anomalies are
    gathered in a report and returned to the author to improve the
    exercise.
  -->
  <!-- =item jobTrackerReport (FUTURE) -->
  <!--
    A tracker server is a server that tells where are stored the grading
    reports for students. More than one tracker may be requested. A
    tracker report may mention more than one storage server if some
    redundancy is wanted.
  -->
  <!-- =item exerciseAuthorReport -->
  <!--
    When an exercise is submitted to the FW4EX system, an autocheck is
    run in order to determine if the exercise is well formed, complete
    and runs correctly. An exercise contains a number of
    pseudo-submissions that wil be graded. Their final mark is compared
    to the exected final mark. Any anomaly is returned to the author of
    the exercise and the exercise will not be deployed that is, not
    offered to students.
  -->
  <!-- =item exercise -->
  <!--
    The concept of an exercise is the central piece of FW4EX. It is a
    fairly long text describing the many aspects of an exercise: what is
    the stem, the questions, what are the grading programs, where are
    the pseudo-copies, etc.
  -->
  <!-- =item exerciseContent -->
  <!--
    An L<exerciseContent> is an excerpt of an L<exercise> corresponding
    to the whole set of information needed by a student to practice an
    exercise. It contains the stem, the data files, the expected content
    of the student's submission. Of course, it excludes the grading
    programs.
  -->
  <!-- =item exerciseStem -->
  <!--
    An L<exerciseStem> is an excerpt of an L<exerciseContent> limited to
    the stem of the exercise. This document serves only for convenience
    for FW4EX clients that do not want to analyse an L<exerciseContent>
    in order to extract the stem.
  -->
  <!-- =back -->
  <!-- =head1 Use cases -->
  <!-- =head2 Student's submission -->
  <!--
    This is the use case where a student submits some files to be graded
    against one exercise. Only XML documents are shown. When receiving
    such a request, the A server elaborates a jobSubmission and responds
    with a jobSubmittedReport. Then marking drivers poll A servers,
    inspect acquisitionServerState, choose a waiting jobSubmission,
    process it and store the resulting jobStudentReport on the S server.
  -->
  <!--
        Student            A server          Marking Driver
       POST a job ->          |
                              V 
                         jobSubmission
                              |
         jobSubmittedReport <-|
                              |
                              |           <- GET jobs
                              |-> acquisitionServerState
                              |
                              |           <- GET one job
                              |-> jobSubmission
                                                |
                                                V
      GET job report ->                         |
                             jobStudentReport <-|
  -->
  <!-- =head2 Teacher's batch submission -->
  <!--
    This is the use case where a teacher submits a batch of students'
    files. to be graded. Only XML documents are shown. The teacher
    generates a multiJobSubmission, the A server explodes this
    multiJobSubmission into multiple jobSubmissions, elaborates a
    batchSubmission and responds with a multiJobSubmittedReport. Marking
    drivers poll the A servers, get jobSubmission or batchSubmission and
    store their answers on the S server.
  -->
  <!--
          Teacher          A server          Marking Driver
      POST a batch:            |
       multiJobSubmission ->   |
                               V 
                          batchSubmission
                          jobSubmission (many)
                               |
     multiJobSubmittedReport <-|
                               |           <- GET batches
                               |-> acquisitionServerState
                               |
                               |           <- GET job one by one...
                               |-> jobSubmission 
                               |
                               |           <- GET also the batch 
                               |-> batchSubmission
                                                  |
                                                  V
      GET batch report ->                         |
                          multiJobStudentReport <-|
      GET job report one by one... ->             |
                               jobStudentReport <-|
  -->
  <!-- =head2 Teacher's exercise submission -->
  <!--
    This is the use case where a teacher submits an exercise. Only XML
    documents are shown. When an exercise is posted, the E server
    elaborates an exerciseSubmission document and answers with an
    exerciseSubmittedReport. Marking drivers poll E servers, choose an
    exercise to autocheck, get it, unwrap it and mark all the pseudojobs
    the exercise contains. If the exercise is successfully autochecked,
    it will be deployed.........
  -->
  <!--
          Student           E server          Marking Driver
        POST an exercise ->    |
                               V 
                       exerciseSubmission
                               |
     exerciseSubmittedReport <-|
                               |           <- GET exercises
                               |-> exerciseServerState
                               |
                               |           <- GET one exercise
                               |-> exerciseSubmission
                                                   |
                                                   V
      GET exercise report ->                       |
                            exerciseAuthorReport <-|
      GET job report one by one... ->              |
                                jobStudentReport <-|
      GET job author report one by one... ->       |
                                 jobAuthorReport <-|
  -->
  <!-- =head1 Root element: fw4ex -->
  <!--
    An C<fw4ex> element has one mandatory attribute: the C<version>
    attribute identifying the version of this grammar. Version numbers
    have a major.minor structure. Incompatible changes to this grammar
    increment the major number. Minor evolutions increment the minor
    number.
  -->
  <!--
    The optional C<lang> and C<xml:lang> attributes specify the language
    in which the exercise is written. French will use the values C<fr>
    or C<fr_FR> according to the usual standards.
  -->
  <!-- =cut -->
  <define name="fw4ex">
    <element name="fw4ex">
      <attribute name="version">
        <choice>
          <value>1.0</value>
          <value>1.1</value>
          <value>1.2</value>
          <value>1.3</value>
        </choice>
      </attribute>
      <optional>
        <!-- language of the exercise: -->
        <attribute name="xml:lang">
          <data type="language"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="lang">
          <data type="language"/>
        </attribute>
      </optional>
      <!-- Various kind of document: -->
      <choice>
        <ref name="jobSubmission"/>
        <ref name="jobSubmittedReport"/>
        <ref name="multiJobSubmission"/>
        <ref name="multiJobSubmittedReport"/>
        <ref name="batchSubmission"/>
        <ref name="exerciseSubmission"/>
        <ref name="exerciseSubmittedReport"/>
        <ref name="studentHistory"/>
        <ref name="personHistory"/>
        <ref name="exercisesList"/>
        <ref name="exercisesPath"/>
        <ref name="acquisitionServerState"/>
        <ref name="exerciseServerState"/>
        <ref name="jobsList"/>
        <ref name="groupReport"/>
        <ref name="authenticationAnswer"/>
        <ref name="errorAnswer"/>
        <ref name="constellationConfiguration"/>
        <ref name="jobStudentReport"/>
        <ref name="multiJobStudentReport"/>
        <ref name="jobAuthorReport"/>
        <ref name="exerciseAuthorReport"/>
        <ref name="jobTrackerReport"/>
        <ref name="exercise"/>
        <ref name="exerciseContent"/>
        <ref name="exerciseStem"/>
      </choice>
    </element>
  </define>
  <!-- Ajout de ???   | constellationReport -->
  <!--
    #################################################################
      Internal format used between servers A(cquisition) and M(arking)
    #################################################################
    When a job is submitted, the acquisition server just records the
    name of the student, the name of the exercise and the submission
    date. The resulting xml fragment is stored in a fw4ex.xml file
    archived in the whole tgz containing the submission and ready to be
    transfered to some marking server. Job submissions are defined in
    the Controller::A::Exercise.pm module.
  -->
  <!-- =head1 jobSubmission -->
  <!--
    This is an internal document generated by an acquisition server to
    record a submission made by a student. This XML document will
    accompany the submitted files for further processing by the grading
    server. It contains three elements to describe the job, the student
    (cf. L<person.id>) and the exercise (cf. L<exercise.id>).
  -->
  <!--
    The element C<job> contains two mandatory attributes: the
    C<archived> attribute tells when the submission was recorded on the
    acquisition server, the C<jobid> attribute is the UUID identifying
    the job.
  -->
  <!-- =cut -->
  <define name="jobSubmission">
    <element name="jobSubmission">
      <mixed>
        <element name="job">
          <optional>
            <!-- a possible label or comment: -->
            <attribute name="label">
              <data type="string"/>
            </attribute>
          </optional>
          <!-- date when the job was archived: -->
          <attribute name="archived">
            <data type="dateTime"/>
          </attribute>
          <!-- The UUID identifying the job: -->
          <attribute name="jobid">
            <data type="NMTOKEN"/>
          </attribute>
        </element>
        <!-- The identifier of the student (an int from the Person table): -->
        <ref name="person.id"/>
        <!-- The identifier of the exercise (an UUID): -->
        <ref name="exercise.id"/>
      </mixed>
    </element>
  </define>
  <!-- =head1 jobSubmittedReport -->
  <!--
    When a job is submitted, it is archived and a jobSubmissionReport is
    sent back to the student as acknowledgement. More precisely, this
    XML document is sent back to the FW4EX client software the student
    is using. This report contains the content of the
    jobSubmissionReport but includes an extra information: the
    C<location> attribute that defines the URI where the
    L<jobStudentReport> will appear. Note that this is an URI not an URL
    hence the client should know the storage server. 
  -->
  <!--
    FUTURE: some hints about the possible (storage or tracker) servers
    may be given in the optional C<servers> element.
  -->
  <!-- =cut -->
  <define name="jobSubmittedReport">
    <element name="jobSubmittedReport">
      <attribute name="location">
        <data type="anyURI"/>
      </attribute>
      <optional>
        <ref name="servers"/>
      </optional>
      <mixed>
        <element name="job">
          <!-- date when the job was archived: -->
          <attribute name="archived">
            <data type="dateTime"/>
          </attribute>
          <!-- The UUID identifying the job: -->
          <attribute name="jobid">
            <data type="NMTOKEN"/>
          </attribute>
        </element>
        <!-- The identifier of the student (an int from the Person table): -->
        <ref name="person.id"/>
        <!-- The identifier of the exercise (an UUID): -->
        <ref name="exercise.id"/>
      </mixed>
    </element>
  </define>
  <!-- =head1 multiJobSubmission -->
  <!--
    After an examination, a teacher may send, in one go, multiple
    students' submissions to the grading machine. These submissions form
    a 'batch'. They should be packed together in a single tar gzipped
    file with a mandatory accompanying C<fw4ex.xml>. Very often the 
    layout of the submitted tgz is:
    
        ./fw4ex.xml
        ./students/1234567.tgz
        ./students/7891234.tgz
        ...
    
    The accompanying C<fw4ex.xml> gives some additional information that
    are completely useless for the grading machinery. However these
    information are useful for the teacher since they allow to tag the
    batch and the results in order to present derived information to
    students. This XML needs to be written by the teacher or some other
    tool the teacher uses to submit this batch.
  -->
  <!-- =cut -->
  <define name="multiJobSubmission">
    <element name="multiJobSubmission">
      <optional>
        <!--
          A label given by the teacher to identify the batch. By default,
          this is the time when the batch was submitted.
        -->
        <attribute name="label">
          <data type="string"/>
        </attribute>
      </optional>
      <zeroOrMore>
        <!-- The (tgz) files to grade -->
        <element name="job">
          <optional>
            <!--
              A label given by the teacher to identify the student (if
              missing, the label will be equal to the filename). The meaning
              of the label is only meaningful for the teacher, its semantics
              is unknown from FW4EX.
            -->
            <attribute name="label">
              <data type="string"/>
            </attribute>
          </optional>
          <!--
            the filename is a URl telling where one student's file is within the
            whole tgz. Often, this is something such as C<students/1234567.tgz>
          -->
          <attribute name="filename">
            <data type="string"/>
          </attribute>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 multiJobSubmittedReport -->
  <!--
    This is the acknowledgement sent to the teacher in response to a
    post of multiple submissions to grade. It only contains the id of
    the whole batch in order to get the associated report which will
    lead to the grading reports of the individual submissions contained
    in the batch.
  -->
  <!-- =cut -->
  <define name="multiJobSubmittedReport">
    <element name="multiJobSubmittedReport">
      <attribute name="location">
        <data type="anyURI"/>
      </attribute>
      <element name="batch">
        <!-- date when the jobs were archived: -->
        <attribute name="archived">
          <data type="dateTime"/>
        </attribute>
        <!-- The UUID identifying the whole batch of jobs: -->
        <attribute name="batchid">
          <data type="NMTOKEN"/>
        </attribute>
      </element>
      <!-- The identifier of the submitter (an int from the Person table): -->
      <ref name="person.id"/>
      <!-- The identifier of the exercise (an UUID): -->
      <ref name="exercise.id"/>
    </element>
  </define>
  <!-- =head1 batchSubmission -->
  <!--
    This is the XML file stored on an acquisition server that describes
    a batch of submissions to be graded. The final batch report will be
    available through an url built after C<batchid>, the grading reports
    for the various submissions will be be available via the various
    C<jobid>. This XML file is synthesized by an A server from the 
    C<multiJobSubmission> request.
  -->
  <!-- =cut -->
  <define name="batchSubmission">
    <element name="batchSubmission">
      <attribute name="label">
        <data type="string"/>
      </attribute>
      <attribute name="archived">
        <data type="dateTime"/>
      </attribute>
      <!-- The UUID identifying the whole batch of jobs: -->
      <attribute name="batchid">
        <data type="NMTOKEN"/>
      </attribute>
      <!-- The identifier of the teacher who asked for this batch -->
      <ref name="person.id"/>
      <!-- The identifier of the exercise (an UUID): -->
      <ref name="exercise.id"/>
      <zeroOrMore>
        <element name="job">
          <attribute name="label">
            <data type="string"/>
          </attribute>
          <attribute name="jobid">
            <data type="string"/>
          </attribute>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!--
    When an exercise is submitted, the acquisition server just records
    the name of the author, the name of the exercise (if this is a new
    version of a previous one) and the submission date. The resulting
    xml fragment is stored in a fw4ex.xml file archived in the whole tgz
    containing the submission and ready to be transfered to some server
    so the exercise may be autochecked.
  -->
  <!-- =head1 exerciseSubmission -->
  <!--
    This is an internal document generated by an exercise server when
    receiving a new exercise. This document will be packed with the files
    sent by the author, it records the author (cf. L<person.id>) and
    contains some information in attributes: when the exercise was
    archived and the UUID attributed to this exercise.
  -->
  <!--
    An optional element may specify the UUID of a previous exercise. The
    submission should then refer to the same exercise, the submission is
    therefore a new version of the exercise. This additional element may
    only be used by administrators.
  -->
  <!-- =cut -->
  <define name="exerciseSubmission">
    <element name="exerciseSubmission">
      <attribute name="location">
        <data type="anyURI"/>
      </attribute>
      <mixed>
        <element name="job">
          <!-- date when the job was archived: -->
          <attribute name="archived">
            <data type="dateTime"/>
          </attribute>
          <!-- The UUID identifying the job: -->
          <attribute name="jobid">
            <data type="NMTOKEN"/>
          </attribute>
        </element>
        <!-- The identifier of the author (the requester): -->
        <ref name="person.id"/>
        <ref name="exercise.id"/>
      </mixed>
    </element>
  </define>
  <!-- =head1 exerciseSubmittedReport -->
  <!--
    This document is returned to an author after submitting an exercise.
    The C<location> field contains the URL where the report will be
    stored after autochecking the exercise.
  -->
  <!-- =cut -->
  <define name="exerciseSubmittedReport">
    <element name="exerciseSubmittedReport">
      <attribute name="location">
        <data type="anyURI"/>
      </attribute>
      <attribute name="jobid">
        <data type="NMTOKEN"/>
      </attribute>
      <!-- The int identifying a person: -->
      <ref name="person.id"/>
      <!-- The UUID identifying the exercise: -->
      <ref name="exercise.id"/>
    </element>
  </define>
  <!-- =head1 studentHistory -->
  <!-- This report lists the jobs concerning a student. -->
  <!-- =cut -->
  <define name="studentHistory">
    <element name="studentHistory">
      <!-- The identifier of the student: -->
      <attribute name="personid">
        <data type="positiveInteger"/>
      </attribute>
      <attribute name="lastname">
        <data type="string"/>
      </attribute>
      <attribute name="firstname">
        <data type="string"/>
      </attribute>
      <attribute name="pseudo">
        <data type="string"/>
      </attribute>
      <zeroOrMore>
        <!-- The list of jobs -->
        <element name="job">
          <attribute name="jobid">
            <data type="NMTOKEN"/>
          </attribute>
          <!-- date when the job was archived on server A: -->
          <attribute name="archived">
            <data type="dateTime"/>
          </attribute>
          <attribute name="mark">
            <data type="decimal"/>
          </attribute>
          <attribute name="totalMark">
            <data type="decimal"/>
          </attribute>
          <attribute name="_href">
            <data type="anyURI"/>
          </attribute>
          <!-- The identifier of the exercise: -->
          <ref name="exercise.id"/>
          <empty/>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 personHistory -->
  <!-- This report lists the jobs, exercises and batches concerning a person. -->
  <!-- =cut -->
  <define name="personHistory">
    <element name="personHistory">
      <!-- The identifier of the person: -->
      <attribute name="personid">
        <data type="positiveInteger"/>
      </attribute>
      <attribute name="lastname">
        <data type="string"/>
      </attribute>
      <attribute name="firstname">
        <data type="string"/>
      </attribute>
      <attribute name="pseudo">
        <data type="string"/>
      </attribute>
      <optional>
        <attribute name="author" annotation:default="false">
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <!-- The list of jobs -->
        <element name="jobs">
          <zeroOrMore>
            <element name="job">
              <attribute name="jobid">
                <data type="NMTOKEN"/>
              </attribute>
              <!-- date when the job was archived on server A: -->
              <attribute name="archived">
                <data type="dateTime"/>
              </attribute>
              <attribute name="mark">
                <data type="decimal"/>
              </attribute>
              <attribute name="totalMark">
                <data type="decimal"/>
              </attribute>
              <attribute name="_href">
                <data type="anyURI"/>
              </attribute>
              <!-- The identifier of the exercise: -->
              <ref name="exercise.id"/>
              <empty/>
            </element>
          </zeroOrMore>
        </element>
      </optional>
      <optional>
        <!-- the list of exercises -->
        <element name="exercises">
          <zeroOrMore>
            <element name="exercise">
              <attribute name="exerciseid">
                <data type="NMTOKEN"/>
              </attribute>
              <attribute name="name">
                <data type="string"/>
              </attribute>
              <attribute name="nickname">
                <data type="string"/>
              </attribute>
              <attribute name="start">
                <data type="dateTime"/>
              </attribute>
              <attribute name="_href">
                <data type="anyURI"/>
              </attribute>
              <empty/>
            </element>
          </zeroOrMore>
        </element>
      </optional>
      <optional>
        <!-- the list of batches -->
        <element name="batches">
          <zeroOrMore>
            <element name="batch">
              <attribute name="batchid">
                <data type="NMTOKEN"/>
              </attribute>
              <attribute name="label">
                <data type="string"/>
              </attribute>
              <attribute name="archived">
                <data type="dateTime"/>
              </attribute>
              <attribute name="_href">
                <data type="anyURI"/>
              </attribute>
              <ref name="exercise.id"/>
              <empty/>
            </element>
          </zeroOrMore>
        </element>
      </optional>
    </element>
  </define>
  <!-- =head1 exercisesList DEPRECATED in favor of exercisesPath -->
  <!--
    This element lists a series of exercises. It tells the exercises a
    student may choose among.
  -->
  <!-- =cut -->
  <define name="exercisesList">
    <element name="exercisesList">
      <zeroOrMore>
        <element name="exercise">
          <attribute name="exerciseid">
            <data type="NMTOKEN"/>
          </attribute>
          <attribute name="location">
            <data type="anyURI"/>
          </attribute>
          <optional>
            <ref name="identification"/>
          </optional>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 exercisesPath -->
  <!--
    This element describes an ordered series of exercises as recommended
    by a teacher. Among the set of exercises, some are mandatory, others
    are suggested. One may also mixes some text to comment the path.
  -->
  <!-- =cut -->
  <define name="exercisesPath">
    <element name="exercisesPath">
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
      <ref name="exercisesPathItem"/>
    </element>
  </define>
  <define name="exercisesPathItem">
    <choice>
      <ref name="exercisesPathItemAnd"/>
      <ref name="exercisesPathItemOr"/>
      <ref name="exercisesPathItemSet"/>
      <ref name="exercisesPathItemNone"/>
      <ref name="exercisesPathItemExercise"/>
      <ref name="exercisesPathItemComment"/>
    </choice>
  </define>
  <define name="exercisesPathItemExercise">
    <element name="exercise">
      <group>
        <attribute name="exerciseid">
          <data type="NMTOKEN"/>
        </attribute>
        <attribute name="location">
          <data type="anyURI"/>
        </attribute>
        <optional>
          <!-- to be removed -->
          <attribute name="uuid">
            <data type="NMTOKEN"/>
          </attribute>
        </optional>
        <optional>
          <!-- to be made mandatory (same as exerciseid ???) -->
          <ref name="identification"/>
        </optional>
      </group>
      <!--
        ############ ajout titre ??? pour affichage ??? Ou encore le serveur
        de paths ajoute les divisions identification.
      -->
    </element>
  </define>
  <define name="exercisesPathItemNone">
    <element name="none">
      <empty/>
    </element>
  </define>
  <define name="exercisesPathItemComment">
    <element name="comment">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="exercisesPathItemOr">
    <element name="or">
      <optional>
        <element name="title">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <optional>
        <element name="prologue">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <oneOrMore>
        <ref name="exercisesPathItem"/>
      </oneOrMore>
      <optional>
        <element name="epilogue">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
    </element>
  </define>
  <define name="exercisesPathItemAnd">
    <element name="and">
      <optional>
        <element name="title">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <optional>
        <element name="prologue">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <oneOrMore>
        <ref name="exercisesPathItem"/>
      </oneOrMore>
      <optional>
        <element name="epilogue">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
    </element>
  </define>
  <define name="exercisesPathItemSet">
    <element name="set">
      <optional>
        <element name="title">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <optional>
        <element name="prologue">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <oneOrMore>
        <ref name="exercisesPathItem"/>
      </oneOrMore>
      <optional>
        <element name="epilogue">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
    </element>
  </define>
  <!-- =head1 constellationConfiguration (FUTURE) -->
  <!--
    This document gives information on the available servers and their
    roles within the FW4EX constellation. Normally any server of the
    constellation may answer that document so a client may discover the
    other servers of the constellation.
  -->
  <!-- =cut -->
  <define name="constellationConfiguration">
    <element name="constellationConfiguration">
      <oneOrMore>
        <ref name="server"/>
      </oneOrMore>
    </element>
  </define>
  <define name="servers">
    <element name="servers">
      <oneOrMore>
        <ref name="server"/>
      </oneOrMore>
    </element>
  </define>
  <define name="server">
    <element name="server">
      <attribute name="type">
        <choice>
          <value>acquisition</value>
          <value>exercise</value>
          <value>storage</value>
          <value>tracker</value>
        </choice>
      </attribute>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
      <optional>
        <attribute name="priority">
          <data type="nonNegativeInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="urlprefix">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <optional>
        <element name="comment">
          <text/>
        </element>
      </optional>
    </element>
  </define>
  <!-- =head1 jobTrackerReport (FUTURE) -->
  <!--
    A tracker server tells on which server(s), the client may find a
    precise grading report (given its URI). The tracker server returns
    an ordered list of possible servers. 
  -->
  <!-- =cut -->
  <define name="jobTrackerReport">
    <element name="jobTrackerReport">
      <attribute name="location">
        <data type="anyURI"/>
      </attribute>
      <ref name="servers"/>
    </element>
  </define>
  <!--
    #################################################################
      Internal format used between servers A(cquisition) and M(arking)
    #################################################################
    When asked by an administrative user, the acquisition server may
    report its state that is, all the archived jobs that are waiting to
    be marked. The state of the Acquisition Server is defined in
    Controller::A::Exercise.pm module.
  -->
  <!-- =head1 acquisitionServerState -->
  <!--
    This document describes the state of an acquisition server. The
    document is dated (with the clock of the server). The C<number>
    attribute specifies how many jobs exist on the acquisition server
    waiting to be graded. The C<number> attribute corresponds to the
    number of elements C<job> that are children of the
    C<acquisitionServerState> element.
  -->
  <!-- =cut -->
  <define name="acquisitionServerState">
    <element name="acquisitionServerState">
      <!-- when this request was served: -->
      <attribute name="date">
        <data type="dateTime"/>
      </attribute>
      <!-- number of archived jobs (see next tags): -->
      <attribute name="number">
        <data type="nonNegativeInteger"/>
      </attribute>
      <zeroOrMore>
        <!-- As much jobs as specified in the preceding 'number' attribute: -->
        <choice>
          <element name="job">
            <!-- date when the job was archived: -->
            <attribute name="archived">
              <data type="dateTime"/>
            </attribute>
            <!-- The UUID identifying the job: -->
            <attribute name="jobid">
              <data type="NMTOKEN"/>
            </attribute>
            <!-- How many times this job has been served by an A server: -->
            <attribute name="served">
              <data type="nonNegativeInteger"/>
            </attribute>
          </element>
          <element name="batch">
            <!-- date when the batch was archived: -->
            <attribute name="archived">
              <data type="dateTime"/>
            </attribute>
            <!-- The UUID identifying the batch: -->
            <attribute name="batchid">
              <data type="NMTOKEN"/>
            </attribute>
          </element>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 exerciseServerState -->
  <!--
    This document lists all the fresh exercises stored in the exercise
    server that need to be autochecked.
  -->
  <!-- =cut -->
  <define name="exerciseServerState">
    <element name="exerciseServerState">
      <!-- when this request was served: -->
      <attribute name="date">
        <data type="dateTime"/>
      </attribute>
      <!-- number of archived exercises (see next tags): -->
      <attribute name="number">
        <data type="nonNegativeInteger"/>
      </attribute>
      <zeroOrMore>
        <!-- As much exercises as specified in the preceding 'number' attribute: -->
        <element name="exercise">
          <!-- date when the exercise was archived: -->
          <attribute name="archived">
            <data type="dateTime"/>
          </attribute>
          <!-- The UUID identifying the exercise: -->
          <attribute name="exerciseid">
            <data type="NMTOKEN"/>
          </attribute>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 jobsList -->
  <!-- This element lists a series of jobs related to an exercise. -->
  <!-- =cut -->
  <define name="jobsList">
    <element name="jobsList">
      <ref name="exercise.id"/>
      <zeroOrMore>
        <element name="job">
          <attribute name="jobid">
            <data type="NMTOKEN"/>
          </attribute>
          <!-- date when the job was archived on server A: -->
          <attribute name="archived">
            <data type="dateTime"/>
          </attribute>
          <optional>
            <attribute name="waitduration">
              <data type="decimal"/>
            </attribute>
          </optional>
          <optional>
            <attribute name="markduration">
              <data type="decimal"/>
            </attribute>
          </optional>
          <optional>
            <attribute name="totalduration">
              <data type="decimal"/>
            </attribute>
          </optional>
          <!-- wait + mark durations -->
          <attribute name="mark">
            <data type="decimal"/>
          </attribute>
          <attribute name="totalMark">
            <data type="decimal"/>
          </attribute>
          <attribute name="_href">
            <data type="anyURI"/>
          </attribute>
          <element name="person">
            <attribute name="personid">
              <data type="positiveInteger"/>
            </attribute>
            <attribute name="lastname">
              <data type="string"/>
            </attribute>
            <attribute name="firstname">
              <data type="string"/>
            </attribute>
          </element>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 authenticationAnswer -->
  <!--
    This message is used by an authentication server as an answer to a
    successful authentication. It is also used as an answer to the
    registration of a new person in order to describe what is in the
    database. It the user is an author, also returns the prefix that
    he may use to name the exercices he authors.
  -->
  <!-- =cut -->
  <define name="authenticationAnswer">
    <element name="authenticationAnswer">
      <element name="person">
        <attribute name="personid">
          <data type="positiveInteger"/>
        </attribute>
        <optional>
          <attribute name="expirationDate">
            <data type="dateTime"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="lastname">
            <data type="string"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="firstname">
            <data type="string"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="pseudo">
            <data type="string"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="email">
            <data type="string"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="accesslink">
            <data type="string"/>
          </attribute>
        </optional>
        <zeroOrMore>
          <element name="author">
            <attribute name="prefix">
              <data type="string"/>
            </attribute>
          </element>
        </zeroOrMore>
      </element>
    </element>
  </define>
  <!-- =head1 groupReport -->
  <!--
    This document lists the students of a group and some of their
    characteristics. Presently, the skill is an integer between 0 and
    100 (100 being the better). If the requester is not an admin, only
    pseudoes are given not real names.
  -->
  <!-- =cut -->
  <define name="groupReport">
    <element name="groupReport">
      <attribute name="synthetized">
        <data type="dateTime"/>
      </attribute>
      <attribute name="groupName">
        <data type="NMTOKEN"/>
      </attribute>
      <zeroOrMore>
        <element name="person">
          <attribute name="personid">
            <data type="positiveInteger"/>
          </attribute>
          <optional>
            <attribute name="lastname">
              <data type="string"/>
            </attribute>
          </optional>
          <optional>
            <attribute name="firstname">
              <data type="string"/>
            </attribute>
          </optional>
          <attribute name="pseudo">
            <data type="string"/>
          </attribute>
          <attribute name="level">
            <data type="positiveInteger"/>
          </attribute>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 groupsReport -->
  <!-- This document lists all groups. This requires to be admin. -->
  <!-- =cut -->
  <define name="groupsReport">
    <element name="groupsReport">
      <attribute name="synthetized">
        <data type="dateTime"/>
      </attribute>
      <zeroOrMore>
        <element name="group">
          <attribute name="groupName">
            <data type="NMTOKEN"/>
          </attribute>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 errorAnswer -->
  <!--
    This message is used whenever some problem is detected. The
    C<person> element may be present if the user is correctly
    authenticated.
  -->
  <!-- =cut -->
  <define name="errorAnswer">
    <element name="errorAnswer">
      <optional>
        <element name="person">
          <attribute name="personid">
            <data type="positiveInteger"/>
          </attribute>
          <attribute name="name">
            <data type="string"/>
          </attribute>
          <attribute name="expirationDate">
            <data type="dateTime"/>
          </attribute>
        </element>
      </optional>
      <!--
        element request {
          xsd:string         # hint about the request               FUTURE ???
        } ? ,
      -->
      <element name="message">
        <attribute name="code">
          <data type="string"/>
        </attribute>
        <element name="reason">
          <data type="string"/>
        </element>
      </element>
    </element>
  </define>
  <!--
    #################################################################
     This format is used to communicate with authors and students
    #################################################################
    When a job is marked, a report is generated and stored on a S server.
    A jobStudentReport is intended for the student (the payload is in XML)
    while the jobAuthorReport is intended for the author (the payload is
    an unstructured text).
  -->
  <!-- =head1 jobStudentReport -->
  <!--
    This document is a the grading report generated by FW4EX. The
    C<jobid> attribute identifies the job, the C<marking> element sums
    up the main information synthetized by the grading engine, the final
    element C<report> contains the (potentially lengthy) text report.
    This text is written with a XHTML-like syntax.
  -->
  <!-- =cut -->
  <define name="jobStudentReport">
    <element name="jobStudentReport">
      <!-- The UUID identifying the job: -->
      <attribute name="jobid">
        <data type="NMTOKEN"/>
      </attribute>
      <ref name="marking"/>
      <element name="report">
        <ref name="xhtml.content"/>
      </element>
    </element>
  </define>
  <!-- =head1 multiJobStudentReport -->
  <!--
    Sometimes, a teacher may want to grade a number of submissions in
    one go: this is specified by a multiJobSubmission element and
    acknowledged with a multiJobSubmittedReport. When the submissions
    are graded, a multiJobStudentReport is returned. This document tells
    where are the individual student reports.
  -->
  <!-- =cut -->
  <define name="multiJobStudentReport">
    <element name="multiJobStudentReport">
      <attribute name="batchid">
        <data type="NMTOKEN"/>
      </attribute>
      <attribute name="archived">
        <data type="dateTime"/>
      </attribute>
      <optional>
        <attribute name="label">
          <data type="string"/>
        </attribute>
      </optional>
      <!-- number of entirely graded jobStudentReports: -->
      <attribute name="finishedjobs">
        <data type="nonNegativeInteger"/>
      </attribute>
      <!-- total number of jobs to be graded: -->
      <attribute name="totaljobs">
        <data type="nonNegativeInteger"/>
      </attribute>
      <oneOrMore>
        <element name="jobStudentReport">
          <optional>
            <attribute name="label">
              <data type="string"/>
            </attribute>
          </optional>
          <attribute name="jobid">
            <data type="NMTOKEN"/>
          </attribute>
          <attribute name="location">
            <data type="anyURI"/>
          </attribute>
          <optional>
            <attribute name="problem" annotation:default="0">
              <choice>
                <value>0</value>
                <value>1</value>
              </choice>
            </attribute>
          </optional>
          <!-- default 0 -->
          <element name="marking">
            <attribute name="started">
              <data type="dateTime"/>
            </attribute>
            <attribute name="finished">
              <data type="dateTime"/>
            </attribute>
            <attribute name="mark">
              <data type="decimal"/>
            </attribute>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </element>
        </element>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 jobAuthorReport -->
  <!--
    If the programs (contained in an exercise) grading a job produce
    errors (on stderr) then this stderr is wrapped into a report in
    order to be analysed by the author of the exercise. The C<report>
    element contains a text since, in presence of anomalies, it is not
    wise to expect a valid xml fragment. The C<marking> element sums up
    the main information synthetized by the grading programs as far as
    they work.
  -->
  <!-- =cut -->
  <define name="jobAuthorReport">
    <element name="jobAuthorReport">
      <!--
        The UUID identifying the job: This UUID allows the author to get
        the associated student report:
      -->
      <attribute name="jobid">
        <data type="NMTOKEN"/>
      </attribute>
      <element name="marking">
        <attribute name="archived">
          <data type="dateTime"/>
        </attribute>
        <!-- date when the VM starts marking the job: -->
        <attribute name="started">
          <data type="dateTime"/>
        </attribute>
        <!-- date when the VM ends marking the job: -->
        <attribute name="ended">
          <data type="dateTime"/>
        </attribute>
        <!-- the precise marker that graded the job: -->
        <ref name="machine"/>
        <!-- The identifier of the exercise: -->
        <ref name="exercise.id"/>
      </element>
      <!-- an unstructured text for authors or fw4ex maintaineer: -->
      <element name="report">
        <text/>
      </element>
    </element>
  </define>
  <!-- =head1 exerciseAuthorReport -->
  <!--
    When an author submits an exercise, the exercise is autochecked that
    is, all the pseudo-jobs it contains are graded. This document
    gathers the jobStudentReports and jobAuthorReports for all these
    pseudo-copies. 
  -->
  <!--
    The C<exerciseid> attribute is an UUID christening the exercise. The
    C<identification> element is a copy of the one given by the author
    in the exercise. The C<pseudojobs> container contains a sequence of
    C<pseudojob> elements. Each of them contains an attribute C<jobid>
    to identify the generated job for that occasion, a copy of the
    corresponding C<submission> element from the exercise and the
    C<marking> element that sums up the information synthetized by the
    grading engine.
  -->
  <!--
    A general text might be produced in the C<report> element, to gather
    the anomalies detected in the descriptor of the exercise (its
    C<fw4ex.xml> file). Some parts may be missing if the exercise is
    badly conditioned (no C<fw4ex.xml> file for instance).
  -->
  <!-- =cut -->
  <define name="exerciseAuthorReport">
    <element name="exerciseAuthorReport">
      <attribute name="exerciseid">
        <data type="NMTOKEN"/>
      </attribute>
      <optional>
        <!--
          This attribute is only present when the exercise had been
          successfully autochecked. This is a safe cookie allowing the
          author to use the freshly autochecked exercise.
        -->
        <attribute name="safecookie">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <ref name="identification"/>
      </optional>
      <optional>
        <element name="pseudojobs">
          <!-- number of entirely graded jobStudentReports: -->
          <attribute name="finishedjobs">
            <data type="nonNegativeInteger"/>
          </attribute>
          <!-- total number of (pseudo-)jobs to be graded: -->
          <attribute name="totaljobs">
            <data type="nonNegativeInteger"/>
          </attribute>
          <zeroOrMore>
            <element name="pseudojob">
              <!-- The jobid gives access to the student's and author's reports: -->
              <attribute name="jobid">
                <data type="NMTOKEN"/>
              </attribute>
              <attribute name="location">
                <data type="anyURI"/>
              </attribute>
              <optional>
                <attribute name="problem" annotation:default="0">
                  <choice>
                    <value>0</value>
                    <value>1</value>
                  </choice>
                </attribute>
              </optional>
              <optional>
                <!-- default 0 -->
                <attribute name="duration">
                  <data type="positiveInteger"/>
                </attribute>
              </optional>
              <!-- in seconds -->
              <ref name="submission"/>
              <ref name="marking"/>
            </element>
          </zeroOrMore>
        </element>
      </optional>
      <optional>
        <!-- An unstructured summary text -->
        <element name="report">
          <text/>
        </element>
      </optional>
    </element>
  </define>
  <!--
    #################################################################
     This format is used by authors.
    #################################################################
  -->
  <!-- =head1 exercise -->
  <!--
    This document describes an exercise and its various facets. Here
    follows the meaning of the great sections composing the description
    of an exercise.
  -->
  <!-- =over -->
  <!-- =item identification -->
  <!-- This section identifies the exercise, its version, its authors. -->
  <!-- =item conditions -->
  <!--
    This section describes the financial (how much to pay) and technical
    (which OS, which language, which proficiency, etc.) conditions
    associated to the exercise.
  -->
  <!-- =item equipment -->
  <!--
    This section describes the files that accompany the exercise, they
    should be sent to the student. These may be examples,
    documentations, data files, etc.
  -->
  <!-- =item initializing -->
  <!--
    This section describes what must be done to prepare a student's
    machine before he may work on an exercise or to prepare a grading
    machine before it may grade a job.
  -->
  <!-- =item content -->
  <!-- This section describes the questions composing the exercise. -->
  <!-- =item autochecking -->
  <!--
    This section defines the pseudo-jobs that is, the non-regression
    tests to determine if the exercise is well deployed.
  -->
  <!-- =item grading -->
  <!-- This section defines how to grade a job. -->
  <!-- =back -->
  <!-- =cut -->
  <define name="exercise">
    <element name="exercise">
      <ref name="identification"/>
      <ref name="conditions"/>
      <optional>
        <ref name="equipment"/>
      </optional>
      <optional>
        <ref name="initializing"/>
      </optional>
      <ref name="content"/>
      <ref name="autochecking"/>
      <ref name="grading"/>
    </element>
  </define>
  <!--
    #################################################################
     This format is used to communicate with students
     #################################################################
  -->
  <!-- =head1 exerciseContent -->
  <!--
    When a student wants to practice an exercise, its fw4ex-enabled
    client receives an extract of the content of the exercise that is,
    the questions and the accompanying files. Grading procedures and
    other critical information are not sent. These files are sent in a
    zipped file containing an C<fw4ex.xml> file describing the content
    of the zipped file. This XML document is an C<exerciseContent>
    element defined as follows.
  -->
  <!--
    The C<synthesisDate> attribute is the date when the zipped file was
    created.
  -->
  <!-- =cut -->
  <define name="exerciseContent">
    <element name="exerciseContent">
      <!-- Creation date of this exerciseContent: -->
      <attribute name="synthesisDate">
        <data type="dateTime"/>
      </attribute>
      <ref name="identification"/>
      <ref name="conditions"/>
      <ref name="equipment"/>
      <ref name="content"/>
      <optional>
        <ref name="characteristics"/>
      </optional>
    </element>
  </define>
  <!-- =head2 characteristics -->
  <!--
    This element contains numbers extracted from the database. These
    numbers may be used to help users to select exercises or to help the
    client runtime to make the user wait for the report.
  -->
  <!-- =cut -->
  <define name="characteristics">
    <element name="characteristics">
      <element name="statistics">
        <!-- Mean time to process a job (extracted from the db): -->
        <attribute name="meantime">
          <data type="decimal"/>
        </attribute>
        <!-- Mean number of attempts to succeed with the exercise: -->
        <attribute name="meantrials">
          <data type="decimal"/>
        </attribute>
        <!-- Number of students having attempted to do this exercise: -->
        <attribute name="students">
          <data type="nonNegativeInteger"/>
        </attribute>
        <!-- Number of students that succeeded: -->
        <attribute name="sucesses">
          <data type="nonNegativeInteger"/>
        </attribute>
      </element>
    </element>
  </define>
  <!-- =head1 exerciseStem -->
  <!--
    Some fw4ex-enabled clients (the javascript browser version for
    instance) prefer to receive selected parts of the previous zip file.
    The C<exerciseStem> contains the displayable content of the exercise
    that is, the introduction and the questions.
  -->
  <!-- =cut -->
  <define name="exerciseStem">
    <element name="exerciseStem">
      <!-- Creation date of this exerciseStem: -->
      <attribute name="synthesisDate">
        <data type="dateTime"/>
      </attribute>
      <!--
          some urls ???
          exercise.id, ???
      -->
      <ref name="identification"/>
      <optional>
        <ref name="equipment"/>
      </optional>
      <ref name="content"/>
    </element>
  </define>
  <!--
    The content of the exercise exposed to the student: stem, solution,
    etc. The total mark may computed from the marks of the questions.
  -->
  <!-- =head1 content -->
  <!--
    The C<content> element contains an optional introduction, a sequence
    of questions followed by an optional conclusion. The C<introduction>
    and C<conclusion> element may be an XHTML inlined text or refer to
    an external file (in the tar gzipped exercise) containing this XHTML
    text.
  -->
  <!--
    An exercise always have at least one question. It may have only one
    question for one-liner exercises for instance.
  -->
  <!-- =cut -->
  <define name="content">
    <a:documentation/>
    <element name="content">
      <optional>
        <!--
          The maximal mark that can be obtained with this exercise:
          This is a possible annotation that, if present, should be coherent
          with the sum of questions' totalMarks.
        -->
        <attribute name="totalMark">
          <data type="decimal"/>
        </attribute>
      </optional>
      <optional>
        <!--
          CHECK! only positive floats!
          a longer text serving as an introduction to the exercise
        -->
        <element name="introduction">
          <ref name="infile.or.inline.xhtml.content"/>
        </element>
      </optional>
      <oneOrMore>
        <ref name="content.question"/>
      </oneOrMore>
      <optional>
        <element name="conclusion">
          <ref name="infile.or.inline.xhtml.content"/>
        </element>
      </optional>
    </element>
  </define>
  <!-- =head1 content.question -->
  <!--
    A C<question> element is identified by an internal name (used for
    internal references: this C<name> is used to get the associated
    grading programs). The C<totalMark> attribute determines the maximal
    mark that might be given when grading this question. The sum of the
    C<totalMark> of all questions sets the total mark that might be
    obtained when grading the whole exercise.
  -->
  <!--
    The C<stem> element contains an XHTML-like inlined text asking a
    question or may refer to an external file holding this XHTML-like
    text. The external file is a file from the tar gzipped exercise.
  -->
  <!--
    The C<expectations> element is a container defining the files (and
    their structuring directories) that are expected in a student's
    submission.
  -->
  <!--
    The other elements C<hint> and C<solution> are reserved for some
    future, they are not implemented for now.
  -->
  <!--
    The C<hint> element defines a text that might appear after a given
    duration. This text may help a student to find his way towards the
    solution. 
  -->
  <!--
    The C<solution> (not sent in C<exerciseStem> document of course) may
    contain a solution that might be used (or displayed) by a grading
    program if useful.
  -->
  <!-- =cut -->
  <define name="content.question">
    <element name="question">
      <!-- All question names must have a different name: -->
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
      <optional>
        <!-- A human-readable title instead of the previous (short) name: -->
        <attribute name="title">
          <data type="string" datatypeLibrary=""/>
        </attribute>
      </optional>
      <!-- The maximal mark that can be obtained with this question: -->
      <attribute name="totalMark">
        <data type="decimal"/>
      </attribute>
      <!--
        CHECK! only positive floats!
        files expected from the student (their name is imposed):
      -->
      <element name="expectations">
        <optional>
          <!-- Are all expectations listed ? -->
          <attribute name="exhaustive">
            <data type="boolean"/>
          </attribute>
        </optional>
        <optional>
          <!-- What to do in case of missing expectations: -->
          <attribute name="iferror">
            <choice>
              <value>abort exercise</value>
              <value>abort question</value>
            </choice>
          </attribute>
        </optional>
        <zeroOrMore>
          <ref name="expectation"/>
        </zeroOrMore>
      </element>
      <!-- The text of the question: -->
      <element name="stem">
        <ref name="infile.or.inline.xhtml.content"/>
      </element>
      <zeroOrMore>
        <!-- Maybe some hints that will appear later...             NYI -->
        <element name="hint">
          <attribute name="when">
            <data type="duration"/>
          </attribute>
          <!-- in seconds -->
          <ref name="infile.or.inline.xhtml.content"/>
        </element>
      </zeroOrMore>
      <optional>
        <element name="solution">
          <ref name="infile.or.inline.xhtml.content"/>
          <!-- and some additional resources or URLS towards explanations ??? -->
        </element>
      </optional>
    </element>
  </define>
  <!-- =head1 infile.or.inline.xhtml.content -->
  <!--
    In many places where texts are expected, it is possible or to put
    the text in the appropriate XML element or to store it in a separate
    file somehere in the exercise tar gzipped file. For small texts, the
    first solution might be preferred but it augments the size of the
    C<fw4ex.xml> exercise description. The second solution potentially
    leads to many small files but these small files may be shared by
    different exercises and may therefore factor some common texts.
  -->
  <!--
    To refer to a separate file, use the C<authorfilename> attribute
    otherwise insert the text in the content of the element. Filenames
    are specified in Unix notations that is, with slashes to express
    directory structures. Conventionnally, the filename do not start
    with a slash. For example, if the C<someExercise.tgz> file contains
  -->
  <!--
        fw4ex.xml
        data/a.txt
        stem/Q1.xml
  -->
  <!-- Then to refer to the C<Q1.xml> file, one should write: -->
  <!--    authorfilename='stem/Q1.xml' -->
  <!-- CHECK what happens when the filename starts with a slash ??? -->
  <!-- =cut -->
  <define name="infile.or.inline.xhtml.content">
    <choice>
      <ref name="xhtml.content"/>
      <!--
        relative to ~author/
        CHECK! No leading / please! No funny chars!
      -->
      <attribute name="authorfilename">
        <data type="string"/>
      </attribute>
    </choice>
  </define>
  <!-- =head1 autochecking -->
  <!--
    The C<autochecking> element defines how the exercise is checked
    before being offered to students. This element contains
    C<submission> elements corresponding to submissions whose expected
    mark will be checked.
  -->
  <!-- =cut -->
  <define name="autochecking">
    <element name="autochecking">
      <oneOrMore>
        <ref name="submission"/>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 submission -->
  <!--
    The C<submission> element defines the files that a student may
    submit. These files will then be graded and the final mark should be
    in accordance with the expected mark. This allows to check that the
    grading programs work well, that the virtual machine contains all
    the utilities needed to grade.
  -->
  <!--
    A submission has a name so it may report anomalies with the name of
    the submission. Usual names are C<null>, C<perfect>, C<almost> etc.
    I usually add new submissions after fixing grading bugs to be sure
    I've fixed them! 
  -->
  <!--
    The C<epsilon> attribute is there to compensate the rounding
    problem. All marks are rounded up to two decimals so, to assert that
    0.99 and 1 are close enough, just set epsilon to be greater than
    0.01. 
  -->
  <!--
    A submission with a true C<skip> attribute must not be marked. The
    associated pseudo submission is not yet ready.
  -->
  <!-- The C<submission.content> defines the content of the submission. -->
  <!-- =cut -->
  <define name="submission">
    <element name="submission">
      <attribute name="name">
        <data type="Name"/>
      </attribute>
      <!-- The copy must be graded with a mark equal to expectedMark +/- epsilon -->
      <attribute name="expectedMark">
        <data type="decimal"/>
      </attribute>
      <optional>
        <attribute name="epsilon" annotation:default="0.01">
          <data type="decimal"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="skip" annotation:default="false">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- The content of the submission: -->
      <ref name="submission.content"/>
    </element>
  </define>
  <!-- =head1 submission.content -->
  <!--
    The submission may be given inline or be contained in an external
    directory. 
  -->
  <!-- =cut -->
  <define name="submission.content">
    <element name="content">
      <choice>
        <ref name="submission.external.content"/>
        <ref name="submission.inline.content"/>
      </choice>
    </element>
  </define>
  <!-- =head1 submission.external.content -->
  <!--
    If the submission is contained in a directory then mention that
    directory. Conventionally, submissions are in a sub-directory (named
    after the name of the submission) of the C<pseudos/> directory. For
    instance, an exercise tgz might be:
  -->
  <!--
       fw4ex.xml
       pseudos/null/
       pseudos/perfect/program
  -->
  <!-- In which case, the XML fragment might be: -->
  <!--
       <submission name='perfect' expectedMark='20' directory='pseudos/perfect'/>
       <submission name='null' expectedMark='0'directory='pseudos/null'/>
  -->
  <!--
    NOTE: empty directories are somewhat problematic in tar or zip archives.
    It is better to create a empty file within them.
  -->
  <!-- =cut -->
  <define name="submission.external.content">
    <!-- relative to ~author/ -->
    <attribute name="directory">
      <data type="string"/>
    </attribute>
    <empty/>
  </define>
  <!-- =head1 submission.inline.content -->
  <!--
    When the files are only small texts, they may be specified inline in
    the exercise description. The C<basename> is the name of the file,
    the C<trim> attribute specifies if leading and trailing spaces or
    newlines should be removed. The content of the file might be given
    in the C<content> attribute or as content of the C<file> element.
    Therefore,
  -->
  <!--   <file basename='foo.txt' content='Hello World'/> -->
  <!-- is the same as: -->
  <!--
      <file basename='foo.txt' trim='yes'/>
           Hello World
      </file>
  -->
  <!-- =cut -->
  <define name="submission.inline.content">
    <oneOrMore>
      <element name="file">
        <attribute name="basename">
          <data type="Name"/>
        </attribute>
        <optional>
          <attribute name="trim">
            <choice>
              <value>yes</value>
              <value>no</value>
            </choice>
          </attribute>
        </optional>
        <choice>
          <text/>
          <interleave>
            <attribute name="content">
              <data type="string"/>
            </attribute>
            <empty/>
          </interleave>
        </choice>
      </element>
    </oneOrMore>
  </define>
  <!-- FUTURE Et si le fichier doit etre rendu dans un repertoire ??? -->
  <!-- =head1 marking -->
  <!--
    The C<marking> element sums up the main results of the grading
    process. The C<archived> attribute specifies when the job was posted
    by the student. The C<started> attribute specifies when the VM
    started grading the job, the C<ended> attribute specifies when the
    VM ended grading the job. The C<finished> attribute specifies when
    the student and author's reports were made available to students or
    authors.
  -->
  <!--
    The C<mark> attribute is the mark given by the grading engine, the
    C<totalMark> is a copy of the maximal mark that might be given for
    that exercise. 
  -->
  <!--
    The C<machine> element specifies which machine graded the job, the
    C<exercise.id> identifies which exercise (mainly which version) was
    used to grade the job.
  -->
  <!--
    Eventually, if the exercise contains several questions, the mark of
    every question appears in the C<partialMark> element paired with the
    name of the question.
  -->
  <!-- =cut -->
  <define name="marking">
    <element name="marking">
      <!-- date when the job was archived on server A: -->
      <attribute name="archived">
        <data type="dateTime"/>
      </attribute>
      <!-- date when the VM starts marking the job: -->
      <attribute name="started">
        <data type="dateTime"/>
      </attribute>
      <!-- date when the VM ends marking the job: -->
      <attribute name="ended">
        <data type="dateTime"/>
      </attribute>
      <!-- date when the markengine finishes storing results: -->
      <attribute name="finished">
        <data type="dateTime"/>
      </attribute>
      <attribute name="mark">
        <data type="decimal"/>
      </attribute>
      <attribute name="totalMark">
        <data type="decimal"/>
      </attribute>
      <optional>
        <!-- the precise marker that graded the job: -->
        <ref name="machine"/>
      </optional>
      <!-- The identifier of the exercise: -->
      <ref name="exercise.id"/>
      <zeroOrMore>
        <!-- marks per question -->
        <element name="partialMark">
          <attribute name="name">
            <data type="NMTOKEN"/>
          </attribute>
          <attribute name="mark">
            <data type="decimal"/>
          </attribute>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <!-- What should be installed on the student's (or grading) machine: -->
  <!-- =head1 initializing -->
  <!--
    The C<initializing> section defines how to prepare the student
    machine in order to be able to practise the exercise. It also
    defines how to prepare the grading engine to be able to grade a job.
    These actions may be: compile a library, uncompress some data files,
    etc. These actions are specified by scripts.
  -->
  <!-- =cut -->
  <define name="initializing">
    <a:documentation/>
    <element name="initializing">
      <oneOrMore>
        <ref name="script"/>
      </oneOrMore>
    </element>
  </define>
  <!-- How to grade the exercise, question by question. -->
  <!-- =head1 grading -->
  <!--
    The grading element defines how to grade a student's submission. It
    first defines which machine should be used, the limit to set, the
    POSIX environment to set up then a series of scripts to run.
  -->
  <!-- =cut -->
  <define name="grading">
    <a:documentation/>
    <element name="grading">
      <optional>
        <!-- The maximal mark that can be obtained with this exercise: -->
        <attribute name="totalMark">
          <data type="decimal"/>
        </attribute>
      </optional>
      <!-- CHECK! only positive floats! -->
      <ref name="machine"/>
      <zeroOrMore>
        <!-- how should be graded every question: -->
        <ref name="limit"/>
      </zeroOrMore>
      <optional>
        <ref name="environment"/>
      </optional>
      <oneOrMore>
        <choice>
          <ref name="grading.question"/>
          <ref name="command"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 machine -->
  <!--
    The C<machine> element specifies the VM required to mark the
    student's submission. There are some predefined VM but you may
    specify your own. You may also specify the version number of the
    machine you want to use though upward compatibility is a goal that
    is, a new machine should not grade differently the jobs graded by an
    old version.
  -->
  <!-- =cut -->
  <define name="machine">
    <element name="machine">
      <choice>
        <!--
          The nickname of the virtual machine to use (for instance a Debian
          4.0r3 32bits)                          FUTURE Here ? identification ?
        -->
        <group>
          <attribute name="nickname">
            <data type="string"/>
          </attribute>
          <optional>
            <attribute name="version">
              <data type="nonNegativeInteger"/>
            </attribute>
          </optional>
        </group>
        <attribute name="name">
          <data type="string"/>
        </attribute>
      </choice>
    </element>
  </define>
  <!-- =head1 grading.question -->
  <!--
    A C<grading.question> specifies how to check a question. The
    question is referred to by its name (see the C<name> attribute of
    the C<question> element in the C<content> element. The C<command>s
    to run may be limited (see C<limit>) and benefit from some POSIX
    variables (see C<environment>).
  -->
  <!--
    If the attribute C<enabled> if present and equal to C<yes>, the
    question will not be graded. This attribute allows the author to
    test only a part of a multi-questions exercise.
  -->
  <!-- =cut -->
  <define name="grading.question">
    <element name="question">
      <!-- Reference the associated question (described in the 'terms' section): -->
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
      <optional>
        <attribute name="enabled" annotation:default="yes">
          <choice>
            <value>yes</value>
            <value>no</value>
          </choice>
        </attribute>
      </optional>
      <zeroOrMore>
        <ref name="limit"/>
      </zeroOrMore>
      <optional>
        <ref name="environment"/>
      </optional>
      <oneOrMore>
        <ref name="command"/>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 limit -->
  <!--
    Limits include timeout, cpu, diskio, etc. The name of these limits
    are predefined (according to `man bash`). The nicknames for the limits
    may also be used (they are defined in /etc/security/limits.conf).
  -->
  <!-- Some limits may specify the unit. Others don't. For example, -->
  <!--
     <limit predefined='stack' value='10' unit='Mi'/>
     <limit predefined='nice' value='5'/>
     <limit predefined='cpu time' value='10' unit='seconds'/>
  -->
  <!-- =cut -->
  <define name="limit">
    <element name="limit">
      <attribute name="predefined">
        <choice>
          <value>core file size</value>
          <!--   (blocks, -c) 0 -->
          <value>core</value>
          <value>data seg size</value>
          <!--   (kbytes, -d) unlimited   # Of course not -->
          <value>data</value>
          <value>max nice</value>
          <!--           (-e) 20 -->
          <value>nice</value>
          <value>file size</value>
          <!--   (blocks, -f) unlimited -->
          <value>fsize</value>
          <value>pending signals</value>
          <!--           (-i) unlimited -->
          <value>sigpending</value>
          <value>max locked memory</value>
          <!--   (kbytes, -l) unlimited -->
          <value>memlock</value>
          <value>max memory size</value>
          <!--   (kbytes, -m) unlimited -->
          <value>rss</value>
          <value>open files</value>
          <!--           (-n) 1024 -->
          <value>nofile</value>
          <value>pipe size</value>
          <!-- (512 bytes, -p) 8 -->
          <value>POSIX message queues</value>
          <!--    (bytes, -q) unlimited -->
          <value>msgqueue</value>
          <value>max rt priority</value>
          <!--           (-r) unlimited -->
          <value>rtprio</value>
          <value>stack size</value>
          <!--   (kbytes, -s) 8192 -->
          <value>stack</value>
          <value>cpu time</value>
          <!--  (seconds, -t) unlimited -->
          <value>cpu</value>
          <value>max user processes</value>
          <!--           (-u) unlimited -->
          <value>nproc</value>
          <value>virtual memory</value>
          <!--
              (kbytes, -v) unlimited
               | "as"           # ???
          -->
          <value>file locks</value>
          <!--           (-x) unlimited -->
          <value>locks</value>
        </choice>
        <!--    | "priority"     # ??? -->
      </attribute>
      <!-- where block = 1024 bytes. -->
      <attribute name="value">
        <data type="nonNegativeInteger"/>
      </attribute>
      <optional>
        <attribute name="unit">
          <choice>
            <value>block</value>
            <value>blocks</value>
            <value>byte</value>
            <value>bytes</value>
            <value>second</value>
            <value>seconds</value>
            <!--    | "512 byte" | "512 bytes" -->
            <value>M</value>
            <value>k</value>
            <!-- absolute numbers: 10^6 and 10^3. -->
            <value>Mi</value>
            <value>ki</value>
          </choice>
          <!-- absolute numbers: 2^20 and 2^10. -->
        </attribute>
      </optional>
    </element>
  </define>
  <!-- FUTURE limits on stdout, stderr ?? -->
  <!-- =head1 environment -->
  <!--
    These elements introduce or remove POSIX variables into or from the
    environment. They may introduce in the context of the exercise, a
    question or a single script. The scope of the variable is accorded.
  -->
  <!-- =cut -->
  <define name="environment">
    <element name="environment">
      <oneOrMore>
        <choice>
          <ref name="environment.assignment"/>
          <ref name="environment.hide"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 environment.assignment -->
  <!--
    This element introduces a POSIX variable. These variables are useful
    for the author and should not disturb the FW4EX engine therefore no
    variable with a prefix of FW4EX is allowed. The variable may be
    specified with a value or a pathname targeting the author directory.
  -->
  <!--
     <set name='WHAT' value='42'/>
     <set name='FILE' authorfilename='data/some.file'/>
  -->
  <!--
    In the last example, the value of FILE will the be the absolute
    filename leading to the file C<data/some.file> from the exercise
    tgz.
  -->
  <!-- =cut -->
  <define name="environment.assignment">
    <element name="set">
      <attribute name="name">
        <data type="NMTOKEN">
          <except>
            <value>^FW4EX.*</value>
          </except>
        </data>
      </attribute>
      <choice>
        <attribute name="value">
          <data type="string"/>
        </attribute>
        <!-- relative to ~author/ -->
        <attribute name="authorfilename">
          <data type="string"/>
        </attribute>
      </choice>
    </element>
  </define>
  <!-- =head1 environment.hide -->
  <!--
    This element specifies which POSIX variable(s) to hide from the
    confined program. The variable may be specified by its name or a set
    of variables may be specified by a regular expression.
  -->
  <!-- =cut -->
  <define name="environment.hide">
    <element name="hide">
      <choice>
        <attribute name="name">
          <data type="NMTOKEN"/>
        </attribute>
        <attribute name="regexp">
          <data type="NMTOKEN"/>
        </attribute>
      </choice>
      <!-- NOT YET IMPLEMENTED -->
    </element>
  </define>
  <!-- =head1 command -->
  <!-- A command may be predefined or may refer to a script. -->
  <!-- =cut -->
  <!-- A command may be a script (see also predefaction.rnc) -->
  <define name="command">
    <choice>
      <ref name="script"/>
      <ref name="predefined.action"/>
    </choice>
  </define>
  <!-- =head1 predefined.action -->
  <!--
    Currently, there is only one predefined action: the C<echo> action
    (reminiscent of the similar task from Ant).
  -->
  <!-- =cut -->
  <!-- and some other predefined actions to come: -->
  <define name="predefined.action">
    <ref name="echo"/>
  </define>
  <!-- =head1 echo -->
  <!--
    Instead of writing a
    script to emit a string, something like:
  -->
  <!--
       <script>
          cat <<EOF
       <p>Hello <em>you</em></p>
       EOF
       </script>
  -->
  <!-- One may write alternatively one of the following: -->
  <!--
        <echo><p>Hello <em>you</em></p></echo>
        <echo message="<p>Hello <em>you</em></p>"/>
        <echo authorfilename='hello.you'/>
  -->
  <!-- Where C<hello.you> is a file (in the exercise targz) containing some text. -->
  <!-- BUG: UNICODE letters seem to be translated into Latin1 ??? -->
  <!-- =cut -->
  <define name="echo">
    <choice>
      <ref name="inline.echo"/>
      <ref name="attributed.echo"/>
      <ref name="external.echo"/>
    </choice>
  </define>
  <define name="inline.echo">
    <element name="echo">
      <choice>
        <ref name="xhtml.inline.text"/>
        <ref name="xhtml.enumeration"/>
        <ref name="xhtml.paragraph"/>
      </choice>
    </element>
  </define>
  <define name="attributed.echo">
    <element name="echo">
      <attribute name="message">
        <data type="string"/>
      </attribute>
      <empty/>
    </element>
  </define>
  <define name="external.echo">
    <element name="echo">
      <!-- relative to ~author/ -->
      <attribute name="authorfilename">
        <data type="string"/>
      </attribute>
      <empty/>
    </element>
  </define>
  <!-- =head1 script -->
  <!--
    A script is a series of commands written in some scripting language
    (sh, perl, ocaml, etc.). The content of the script may be specified
    inline (within the XML element) or in some external file. If the
    script node has a C<idref> attribute then it is generated from
    another node (the one with the associated C<id> attribute). This
    accomodates the fact that nodes whose content is written in the
    C<fw4exsh> language is compiled into C<bash>. It is up to the
    marking slave to run the compiled version or to interpret the
    original source. Of course, the other version has to be ignored
    (hence the id-ref link).
  -->
  <!-- =cut -->
  <define name="script">
    <choice>
      <ref name="inline.script"/>
      <ref name="xml.script"/>
      <ref name="external.script"/>
    </choice>
  </define>
  <!-- =head1 common.script.content -->
  <!--
    Whether inlined or externally defined, scripts share a number of
    common characteristics. Scripts may be limited, the environment may
    be altered, the behaviour after an error may also be specified.
  -->
  <!-- =over -->
  <!-- =item iferror -->
  <!--
    If the script exits with an erroneous exit code (a byte different
    from zero) then either the entire grading process may be aborted,
    either the grading process of the current question is aborted or
    nothing occurs (this is the default action) and the grading process
    resumes with the next script.
  -->
  <define name="iferror">
    <attribute name="iferror">
      <choice>
        <value>abort exercise</value>
        <value>abort question</value>
        <value>next script</value>
      </choice>
    </attribute>
  </define>
  <!-- =item limit -->
  <!--
    There are two kinds of limits that might be set. The limits
    inherited from the C<ulimit> POSIX command or, more finely, the
    limits accepted by the C<confine> utility which are three:
  -->
  <!-- = over -->
  <!-- =item maxcpu -->
  <!--
    This tells how many seconds the script is allowed to run. This is a
    wall-clock duration therefore the script might be impacted if the
    grading machine is busy.
  -->
  <!-- =item maxout -->
  <!--
    This tells how many bytes the script is allowed to produce on its
    stdtout. You may use the multiplier C<k> (1000), C<M> (1000*1000) or
    C<ki> (1024) or C<Mi> (1024*1024). 
  -->
  <!-- =item maxerr -->
  <!--
    This tells how many bytes the script is allowed to produce on its
    stdterr. You may use the multiplier C<k> (1000), C<M> (1000*1000) or
    C<ki> (1024) or C<Mi> (1024*1024).
  -->
  <!-- =back -->
  <!-- =back -->
  <!-- =cut -->
  <define name="common.script.content">
    <zeroOrMore>
      <ref name="limit"/>
    </zeroOrMore>
    <optional>
      <ref name="environment"/>
    </optional>
    <optional>
      <!-- What to do in case of problem (i.e., exit value != 0): -->
      <ref name="iferror" annotation:default="next script"/>
    </optional>
    <optional>
      <!-- parameters for confiner: -->
      <attribute name="maxcpu">
        <data type="nonNegativeInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="maxout">
        <data type="NMTOKEN">
          <param name="pattern">\d+([kM]i?)?</param>
        </data>
      </attribute>
    </optional>
    <optional>
      <attribute name="maxerr">
        <data type="NMTOKEN">
          <param name="pattern">\d+([kM]i?)?</param>
        </data>
      </attribute>
    </optional>
    <zeroOrMore>
      <!-- arguments for the script:                 NOT YET IMPLEMENTED -->
      <ref name="argument"/>
    </zeroOrMore>
  </define>
  <!-- =head1 inline.script -->
  <!--
    An inline script is specified in the body of the C<script> element.
    By default, the script is assumed to be a C<sh> script. The C<trim>
    attribute removes leading and trailing spaces. 
  -->
  <!--
    The script should be runnable that is, may start with a C<#!>
    comment specifying the interpreter to run. This first line will be
    added if the C<language> attribute is present and no such first line
    already exists.
  -->
  <!--
    Pay attention to XML and avoids using less-than signs without
    precaution. To ease readability, instead of writing:
  -->
  <!--
       <script>
          read w &lt; some.file
       </script>
  -->
  <!-- It is preferrable to write: -->
  <!--
       <script><![CDATA[
          read w < some.file
       ]]></script>
  -->
  <!-- =cut -->
  <define name="inline.script">
    <element name="script">
      <ref name="common.script.content"/>
      <optional>
        <ref name="language.attribute"/>
      </optional>
      <optional>
        <attribute name="trim">
          <choice>
            <value>yes</value>
            <value>no</value>
          </choice>
        </attribute>
      </optional>
      <text/>
    </element>
  </define>
  <!-- =head1 xml.script -->
  <!--
    Instead of writing shell scripts you may generate them with a
    graphical UI. The GUI stores its state in XML, a restricted subset
    of shell in XML syntax named C<fw4exsh>. For now, we suppose that if
    an C<xml.script> node is present then an C<inline.script> is also
    present with the compiled version. The GUI uses the first node to
    restaure its state but must regenerate accordingly the other node in
    case of changes.
  -->
  <!-- =cut -->
  <!--
    fw4exsh.xml.script_element = grammar {
      include "markingScript.rnc" { start = script_element }
    }
    Include this grammar inline to remove the necessary interpretation of the
    "markingScript.rnc" relative name. This grammar is a joint work by
    Christophe Bigot and Gabriel Szekely.
  -->
  <define name="xml.script">
    <grammar>
      <start>
        <ref name="script"/>
      </start>
      <define name="script">
        <element name="script">
          <attribute name="language">
            <value>fw4exsh</value>
          </attribute>
          <ref name="script_element"/>
        </element>
      </define>
      <!-- =head2 script -->
      <!--
        This C<fw4exsh> language describes the structure of a marking
        script. This is a tree of loops with commands as leaves. The
        C<chDir> command allows to change the current directory. 
      -->
      <!--
        Many of these nodes may be annotated with a C<totalMark> attribute
        stating what is the maximal number of points that might be won after
        evaluation of this node. 
      -->
      <!-- =cut -->
      <define name="script_element">
        <choice>
          <ref name="loop"/>
          <ref name="chDir"/>
          <ref name="command"/>
        </choice>
      </define>
      <!-- =head2 loop -->
      <!--
        It is possible to loop over an enumeration of strings or to loop
        over a set of files (or directories). Loops are named so it is
        possible to refer to them in order to know the number of iteration,
        the current index and the current value.
      -->
      <!-- =cut -->
      <define name="loop">
        <choice>
          <ref name="loopOnFiles"/>
          <ref name="loopOnStrings"/>
        </choice>
      </define>
      <!-- Enumeration on a set of strings -->
      <define name="loopOnStrings">
        <element name="loopOnStrings">
          <optional>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </optional>
          <attribute name="name">
            <data type="NMTOKEN"/>
          </attribute>
          <element name="items">
            <zeroOrMore>
              <element name="item">
                <text/>
              </element>
            </zeroOrMore>
          </element>
          <element name="body">
            <ref name="script_element"/>
          </element>
        </element>
      </define>
      <!-- Enumeration on a set of things (files or directories) within a directory -->
      <define name="loopOnFiles">
        <element name="loopOnFiles">
          <optional>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </optional>
          <attribute name="name">
            <data type="NMTOKEN"/>
          </attribute>
          <attribute name="fw4exdir">
            <choice>
              <value>/</value>
              <value>teacher</value>
              <value>student</value>
            </choice>
          </attribute>
          <choice>
            <element name="pathregexp">
              <text/>
            </element>
            <element name="items">
              <zeroOrMore>
                <element name="item">
                  <data type="string"/>
                </element>
              </zeroOrMore>
            </element>
          </choice>
          <element name="body">
            <ref name="script_element"/>
          </element>
        </element>
      </define>
      <!-- =head2 chDir -->
      <!--
        Changes the current directory. This change is limited to the
        evaluation of the body.
      -->
      <!-- =cut -->
      <define name="chDir">
        <element name="chDir">
          <choice>
            <!-- to refer to the current value of the index of the loop of that name: -->
            <attribute name="nameref">
              <data type="NMTOKEN"/>
            </attribute>
            <group>
              <attribute name="fw4exdir">
                <choice>
                  <value>/</value>
                  <value>teacher</value>
                  <value>student</value>
                </choice>
              </attribute>
              <attribute name="dirname">
                <data type="string"/>
              </attribute>
            </group>
          </choice>
          <element name="body">
            <ref name="script_element"/>
          </element>
        </element>
      </define>
      <!-- =head2 command -->
      <!--
        Commands may represent an assertion (checking whether some property
        hold) or the comparison of some student's program output with
        teacher's output.
      -->
      <!-- =cut -->
      <define name="command">
        <choice>
          <ref name="assertCommand"/>
          <ref name="compareCommand"/>
        </choice>
      </define>
      <!-- Command which will be graded using comparison grading -->
      <define name="compareCommand">
        <element name="compareCommand">
          <optional>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </optional>
          <attribute name="fw4exdir">
            <choice>
              <value>PATH</value>
              <value>/</value>
              <value>teacher</value>
              <value>student</value>
            </choice>
          </attribute>
          <attribute name="name">
            <data type="string"/>
          </attribute>
          <optional>
            <attribute name="teacherFw4exdir">
              <choice>
                <value>PATH</value>
                <value>/</value>
                <value>teacher</value>
                <value>student</value>
              </choice>
            </attribute>
            <attribute name="teacherName">
              <data type="string"/>
            </attribute>
          </optional>
          <optional>
            <element name="components">
              <zeroOrMore>
                <ref name="component"/>
              </zeroOrMore>
            </element>
          </optional>
          <optional>
            <ref name="input"/>
          </optional>
          <ref name="gradingScripts"/>
        </element>
      </define>
      <!-- Command which will be graded using assertion grading. -->
      <define name="assertCommand">
        <element name="assertCommand">
          <optional>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </optional>
          <attribute name="fw4exdir">
            <choice>
              <value>PATH</value>
              <value>/</value>
              <value>teacher</value>
              <value>student</value>
            </choice>
          </attribute>
          <attribute name="name">
            <data type="string"/>
          </attribute>
          <optional>
            <element name="components">
              <zeroOrMore>
                <ref name="component"/>
              </zeroOrMore>
            </element>
          </optional>
          <optional>
            <ref name="input"/>
          </optional>
          <ref name="assertionScripts"/>
          <ref name="gradingScripts"/>
        </element>
      </define>
      <!-- Allows to specify assertion scripts exectuted after the command -->
      <define name="assertionScripts">
        <element name="assertionScripts">
          <optional>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </optional>
          <zeroOrMore>
            <element name="script">
              <choice>
                <group>
                  <attribute name="fw4exdir">
                    <choice>
                      <value>/</value>
                      <value>teacher</value>
                    </choice>
                  </attribute>
                  <attribute name="name">
                    <data type="string"/>
                  </attribute>
                </group>
                <element name="src">
                  <data type="string"/>
                </element>
              </choice>
            </element>
          </zeroOrMore>
        </element>
      </define>
      <!--
        Allows to specify grading script that will actually grade the command
        execution results
      -->
      <define name="gradingScripts">
        <element name="gradingScripts">
          <optional>
            <attribute name="totalMark">
              <data type="decimal"/>
            </attribute>
          </optional>
          <zeroOrMore>
            <element name="script">
              <choice>
                <group>
                  <attribute name="fw4exdir">
                    <choice>
                      <value>/</value>
                      <value>teacher</value>
                    </choice>
                  </attribute>
                  <attribute name="name">
                    <data type="string"/>
                  </attribute>
                </group>
                <element name="src">
                  <data type="string"/>
                </element>
              </choice>
            </element>
          </zeroOrMore>
        </element>
      </define>
      <!-- =head2 component -->
      <!--
        A command is compound of the name of a program to run and some
        C<component>s specifying with which command line arguments, which
        input streams, etc.
      -->
      <!-- =cut -->
      <!--
        Same components are used in assertCommand and compareCommand
        However the teacherXXX attributes don't make sense in an assertCommand element
        since only the assertionScripts are used with assertCommand
      -->
      <define name="component">
        <choice>
          <ref name="option"/>
          <ref name="file"/>
          <ref name="fileContent"/>
        </choice>
      </define>
      <define name="option">
        <element name="option">
          <choice>
            <!-- May only refer to the name of an embedding loopOnStrings -->
            <attribute name="nameref">
              <data type="NMTOKEN"/>
            </attribute>
            <group>
              <attribute name="value">
                <data type="string"/>
              </attribute>
              <optional>
                <attribute name="teacherValue">
                  <data type="string"/>
                </attribute>
              </optional>
            </group>
          </choice>
        </element>
      </define>
      <!-- Nota: this element is defined here within the xml.script inner grammar. -->
      <define name="file">
        <element name="file">
          <choice>
            <!-- May only refer to the name of an embedding loopOnFiles -->
            <attribute name="nameref">
              <data type="NMTOKEN"/>
            </attribute>
            <group>
              <attribute name="fw4exdir">
                <choice>
                  <value>/</value>
                  <value>teacher</value>
                  <value>student</value>
                </choice>
              </attribute>
              <attribute name="name">
                <data type="string"/>
              </attribute>
              <optional>
                <attribute name="teacherFw4exdir">
                  <choice>
                    <value>/</value>
                    <value>teacher</value>
                    <value>student</value>
                  </choice>
                </attribute>
                <attribute name="teacherName">
                  <data type="string"/>
                </attribute>
              </optional>
            </group>
          </choice>
        </element>
      </define>
      <define name="fileContent">
        <element name="fileContent">
          <choice>
            <!-- May only refer to the name of an embedding loopOnFiles -->
            <attribute name="nameref">
              <data type="NMTOKEN"/>
            </attribute>
            <group>
              <attribute name="fw4exdir">
                <choice>
                  <value>/</value>
                  <value>teacher</value>
                  <value>student</value>
                </choice>
              </attribute>
              <attribute name="name">
                <data type="string"/>
              </attribute>
              <optional>
                <attribute name="teacherFw4exdir">
                  <choice>
                    <value>/</value>
                    <value>teacher</value>
                    <value>student</value>
                  </choice>
                </attribute>
                <attribute name="teacherName">
                  <data type="string"/>
                </attribute>
              </optional>
            </group>
          </choice>
        </element>
      </define>
      <define name="input">
        <element name="input">
          <choice>
            <!-- May only refer to the name of an embedding loopOnFiles -->
            <attribute name="nameref">
              <data type="NMTOKEN"/>
            </attribute>
            <group>
              <attribute name="fw4exdir">
                <choice>
                  <value>/</value>
                  <value>teacher</value>
                  <value>student</value>
                </choice>
              </attribute>
              <attribute name="name">
                <data type="string"/>
              </attribute>
              <optional>
                <attribute name="teacherFw4exdir">
                  <choice>
                    <value>/</value>
                    <value>teacher</value>
                    <value>student</value>
                  </choice>
                </attribute>
                <attribute name="teacherName">
                  <data type="string"/>
                </attribute>
              </optional>
            </group>
          </choice>
        </element>
      </define>
      <!-- end of marking-script-grammar.rnc -->
    </grammar>
  </define>
  <!-- See toShell.pm before adding a new language here: -->
  <define name="language.attribute">
    <attribute name="language" annotation:default="sh">
      <choice>
        <value>sh</value>
        <value>bash</value>
        <value>perl</value>
      </choice>
    </attribute>
  </define>
  <!-- =head1 external.script -->
  <!--
    This element specifies a program to run. This program may be in the
    targz exercise file or in the common library.
  -->
  <!-- =cut -->
  <define name="external.script">
    <element name="script">
      <ref name="common.script.content"/>
      <choice>
        <!-- relative to ~author/ -->
        <attribute name="authorfilename">
          <data type="string"/>
        </attribute>
        <!-- relative to FW4EX_LIB_DIR/         # NOT YET IMPLEMENTED -->
        <attribute name="scriptname">
          <data type="string"/>
        </attribute>
      </choice>
      <!-- FUTURE: maybe some arguments ? -->
      <empty/>
    </element>
  </define>
  <!-- =head1 argument (NOT YET IMPLEMENTED) -->
  <!--
    Some general scripts may require arguments to be tailored to a
    specific task. Arguments must be given in positional order, they may
    be regular strings or filenames relative to the exercise targzipped
    file or relative to the student's files.
  -->
  <!-- =cut -->
  <define name="argument">
    <element name="argument">
      <choice>
        <attribute name="value">
          <data type="string"/>
        </attribute>
        <!-- file relative to ~student/ -->
        <attribute name="studentfilename">
          <data type="string"/>
        </attribute>
        <!-- relative to ~author/ -->
        <attribute name="authorfilename">
          <data type="string"/>
        </attribute>
      </choice>
    </element>
  </define>
  <!--
    ##########################
    =head1 expectation
  -->
  <!--
    An C<expectation> element describes a file or a directory expected
    to be submitted by a student. The description may be enriched by
    some metadata customizing the widget to collect this information.
  -->
  <!--
    The C<expectation> is a subtree of C<directory> elements containing
    other C<directory> or <file> elements. A comment may be attached as
    a hint to the goal of the directory (what it should hold) or file
    (what it should contain).
  -->
  <!--
    For instance, if the exercise requires the student to write a
    foo.bar file somewhere in a hux directory, then the expectation will
    be:
  -->
  <!--
       <expectation>
         <directory basename='hux'>
            <file basename='foo.bar'/>
         </directory>
       </expectation>
  -->
  <!--
    Expectations are automatically checked when a question is graded.
    If a file or directory is missing, the entire question is aborted.
  -->
  <!-- =cut -->
  <define name="expectation">
    <choice>
      <ref name="expectation.file"/>
      <ref name="expectation.directory"/>
    </choice>
  </define>
  <!-- =head1 expectation.directory -->
  <!--
    An C<expectation.directory> element defines the basename of the
    directory. A comment (an XHTML-like text) may be associated. This
    comment may appear in an interactive FW4EX client to hint what this
    directory is for. The C<all> attribute tells whether the entire
    content of the directory should be submitted. If C<all> is true
    the inner expectations must also be checked.
  -->
  <!-- =cut -->
  <define name="expectation.directory">
    <element name="directory">
      <attribute name="basename">
        <data type="string"/>
      </attribute>
      <optional>
        <attribute name="all" annotation:default="false">
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <element name="comment">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <zeroOrMore>
        <ref name="expectation"/>
      </zeroOrMore>
    </element>
  </define>
  <!-- =head1 expectation.file -->
  <!--
    An C<expectation.file> element describes a file that the student
    should submit. A comment (an XHTML-like text) may be associated.
    This comment may appear in an interactive FW4EX client to hint what
    this file should contain. An C<initial> element may contain hints
    about the height (in lines) and width (in columns) of a widget that
    might be used to collect the student's input. The initial content of
    the widget might as well be specified.
  -->
  <!-- =cut -->
  <define name="expectation.file">
    <element name="file">
      <attribute name="basename">
        <data type="string"/>
      </attribute>
      <optional>
        <element name="comment">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <optional>
        <attribute name="eol" annotation:default="lf">
          <choice>
            <value>lf</value>
            <value>cr</value>
            <value>crlf</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="coding" annotation:default="UTF-8">
          <choice>
            <value>UTF-8</value>
            <value>ISO-8859-1</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="presence" annotation:default="mandatory">
          <choice>
            <value>mandatory</value>
            <value>optional</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="show">
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <!--
          The shape of the solution (may be used to prefill the widget that
          will contain the student's solution). Attributes are hints for the
          number of lines of the expected solution.
        -->
        <element name="initial">
          <optional>
            <attribute name="height">
              <data type="positiveInteger"/>
            </attribute>
          </optional>
          <optional>
            <attribute name="width">
              <data type="positiveInteger"/>
            </attribute>
          </optional>
          <text/>
        </element>
      </optional>
    </element>
  </define>
  <!--
    ########################## 
    =head1 equipment
  -->
  <!--
    This element describes the files that should be sent to the student.
    The C<equipment> describes the structure (directories and files)
    that must be created on the student's machine. The C<initializing>
    element specifies how the student's machine should be prepared (some
    files may be uncompressed or compiled).
  -->
  <!-- =cut -->
  <define name="equipment">
    <element name="equipment">
      <ref name="equipment.content"/>
      <optional>
        <ref name="initializing"/>
      </optional>
    </element>
  </define>
  <!-- FUTURE??? <lifecycle><setup/><teardown/></lifecycle> ??? -->
  <!-- =head1 equipment.content -->
  <!--
    If the C<a/b.c> and C<a/d.e> files must be sent then this will be
    described as:
  -->
  <!--
     <directory basename='a'>
       <file basename='b.c'/>
       <file basename='d.e'/>
     </directory>
  -->
  <!-- or, alternatively, as: -->
  <!--
     <directory basename='a'>
       <file basename='b.c'/>
     </directory>
     <directory basename='a'>
       <file basename='d.e'/>
     </directory>
  -->
  <!-- =cut -->
  <define name="equipment.content">
    <zeroOrMore>
      <choice>
        <ref name="file"/>
        <ref name="directory"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- =head1 file (PARTIALLY IMPLEMENTED) -->
  <!--
    This element describes a file. Only the C<basename> is a required
    attribute. Among the others maybe the C<eol> attribute will be
    implemented to cope with end-of-lines for text files.
  -->
  <!--
    When file is part of the equipment, the comment may be used by a
    FW4EX-client to accompany a link to get the file. When file is part
    of the expectations, the comment may be used to accompany an input
    box or file input box.
  -->
  <!-- =cut -->
  <define name="file">
    <element name="file">
      <attribute name="basename">
        <data type="Name"/>
      </attribute>
      <optional>
        <element name="comment">
          <ref name="xhtml.inline.text"/>
        </element>
      </optional>
      <optional>
        <attribute name="size">
          <data type="nonNegativeInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="digest">
          <data type="NMTOKEN"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="digestAlgorithm">
          <value>sha1</value>
        </attribute>
      </optional>
      <optional>
        <attribute name="type" annotation:default="binary">
          <choice>
            <value>text</value>
            <value>binary</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="eol" annotation:default="lf">
          <choice>
            <value>lf</value>
            <value>cr</value>
            <value>crlf</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="mimetype" annotation:default="application/octet-stream">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="hidden" annotation:default="false">
          <data type="boolean"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="directory">
    <element name="directory">
      <attribute name="basename">
        <data type="Name"/>
      </attribute>
      <zeroOrMore>
        <choice>
          <ref name="file"/>
          <ref name="directory"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!--
    ########################## 
    =head1 identification
  -->
  <!--
    This element identifies the exercise and its authors. The main
    identifier of an exercise is a C<name>. Usual names are like Java
    packages that is inverted DNS style. Here are some examples:
    C<com.paracamplus.li362.sh.3> or C<org.paracamplus.jfp.1>. Since
    these names are rather long, a short nickname should be specified
    this allows to retrieve more easily the exercises in a small list of
    exercises. The C<date> attribute specifies the creation date of the
    current version of the exercise.
  -->
  <!--
    The C<summary> (an XHTML-like text) is a short paragraph describing
    the goals of the exercise: the kind of skills it addresses, the set
    of exercises it belongs to. This summary is used as a teaser in a
    list of exercises and may be published for search-engines. The
    exercise may also be tagged to help retrieving it with help of a
    search engine.
  -->
  <!--
    NOTE1: the exercise.id is given by the platform and cannot be guessed
    by authors so it cannot appear in the identification. However it
    appears in the database.
  -->
  <!--
    NOTE2: currently there is no version number. Versioning is
    automatic: when submitting a new targz exercise file with an already
    known name, a new exercise.id is assigned to distinguish the old
    version from the new one.
  -->
  <!-- =cut -->
  <define name="identification">
    <element name="identification">
      <!--
        This is the unique reference of the exercise as christened by the
        author. The reference must change each time the exercise is
        uploaded so it should contain a version number.
      -->
      <attribute name="name">
        <data type="Name"/>
      </attribute>
      <!--   attribute version { xsd:nonNegativeInteger },        ???  FIXME -->
      <attribute name="date">
        <data type="dateTime"/>
      </attribute>
      <!-- a short nickname more memorizable than the name: -->
      <attribute name="nickname">
        <data type="NMTOKEN"/>
      </attribute>
      <!--
        A very short text (optimally a single sentence) describing the
        exercise. This will appear on the web site:
      -->
      <element name="summary">
        <optional>
          <!-- If true, then this summary may be indexed by search engines: -->
          <attribute name="public" annotation:default="false">
            <data type="boolean"/>
          </attribute>
        </optional>
        <ref name="xhtml.inline.text"/>
      </element>
      <optional>
        <!-- Words qualifying the exercise that may be used as indexes: -->
        <element name="tags">
          <oneOrMore>
            <ref name="tag"/>
          </oneOrMore>
        </element>
      </optional>
      <ref name="authorship"/>
    </element>
  </define>
  <!-- =head1 tag -->
  <!--
    Exercises may be tagged with names (usually short names that is,
    words). These tags may stress the type of exercise (examination,
    one-liner, etc.), the language of the answer (C, Java, bash, sed,
    etc.), the set of exercises comprising this exercise, etc.
  -->
  <!-- =cut -->
  <define name="tag">
    <element name="tag">
      <attribute name="name">
        <data type="Name"/>
      </attribute>
    </element>
  </define>
  <!-- =head1 authorship -->
  <!--
    This element defines who are the authors, how to communicate with
    them, related information describing them. Their contribution to the
    exercise may also be described. Authors are identified by their
    email though internally (in the database), authors are, like person,
    identified by an integer.
  -->
  <!-- =cut -->
  <define name="authorship">
    <element name="authorship">
      <oneOrMore>
        <element name="author">
          <optional>
            <attribute name="since">
              <data type="dateTime"/>
            </attribute>
          </optional>
          <optional>
            <attribute name="till">
              <data type="dateTime"/>
            </attribute>
          </optional>
          <element name="firstname">
            <data type="string"/>
          </element>
          <optional>
            <element name="middlename">
              <data type="string"/>
            </element>
          </optional>
          <!-- may be a simple initial -->
          <element name="lastname">
            <data type="string"/>
          </element>
          <optional>
            <element name="postlastname">
              <data type="string"/>
            </element>
          </optional>
          <!--
            additional postfixed names
            This email is used to identify the author:
          -->
          <element name="email">
            <data type="string"/>
          </element>
          <optional>
            <!-- This email is used by students to communicate directly with the author: -->
            <element name="exerciseEmail">
              <data type="string"/>
            </element>
          </optional>
          <optional>
            <element name="siteurl">
              <data type="anyURI"/>
            </element>
          </optional>
          <optional>
            <element name="comment">
              <ref name="xhtml.inline.text"/>
            </element>
          </optional>
        </element>
      </oneOrMore>
    </element>
  </define>
  <!--
    Removed person.id since it is difficult to know it when creating an
    exercise. The email will be used as identifier.
  -->
  <!--
    ########################## 
    =head1 conditions
  -->
  <!--
    This element specifies under which conditions this exercise may be
    practised. This element defines the C<cost> (in Euro). A
    C<description> describes the resources needed to practice the
    exercise: these conditions may be on the student's machine OS, or
    required libraries or required skills, etc.
  -->
  <!-- =cut -->
  <define name="conditions">
    <element name="conditions">
      <attribute name="cost">
        <data type="double"/>
      </attribute>
      <attribute name="costunit">
        <value>euro</value>
      </attribute>
      <!--
          targetedPopulation ?,
          membership ?,
          finance ?,
          skills ?,
      -->
      <!--
        This description is shown to the student and describes the machine,
        the OS, the languages, the libraries needed for the exercise:
      -->
      <element name="description">
        <ref name="xhtml.content"/>
      </element>
    </element>
  </define>
  <!--
    #################################################################
    =head1 Common abbreviations
  -->
  <!-- These are common abbreviations used in this grammar. -->
  <!-- =cut -->
  <define name="exercise.id">
    <element name="exercise">
      <attribute name="exerciseid">
        <data type="NMTOKEN"/>
      </attribute>
      <optional>
        <attribute name="safecookie">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="name">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="nickname">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="totalMark">
          <data type="decimal"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="person.id">
    <element name="person">
      <attribute name="personid">
        <data type="positiveInteger"/>
      </attribute>
    </element>
  </define>
  <define name="job.id">
    <element name="job">
      <attribute name="jobid">
        <data type="NMTOKEN"/>
      </attribute>
    </element>
  </define>
  <!--
    ######################
    =head1 xhtml.content
  -->
  <!--
    All texts present in different places in this C<fw4ex.xml> file are
    written in an XHTML-like style. Reports intended for students must
    also respect this grammar. This XHTML-like fragment is sufficient
    for Wiki purpose. It allows for section, inner section, paragraph, code
    block, ordered or unnumbered enumeration, normal, strong and
    emphasized inline texts. Most of the time, the elements tags have
    the same name as in XHTML.
  -->
  <!-- =cut -->
  <define name="xhtml.content">
    <oneOrMore>
      <choice>
        <ref name="xhtml.inline.text"/>
        <ref name="xhtml.enumeration"/>
        <ref name="xhtml.paragraph"/>
        <ref name="xhtml.section"/>
        <ref name="xhtml.comparison"/>
        <ref name="xhtml.file.annotation"/>
      </choice>
    </oneOrMore>
  </define>
  <!-- =head1 xhtml.section -->
  <!--
    A section has a title and a body. A C<name> may be specified for
    internal links. The C<rank> attribute may be used to number the
    sections. 
  -->
  <!-- =cut -->
  <define name="xhtml.section">
    <element name="section">
      <optional>
        <attribute name="name">
          <data type="NMTOKEN"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="rank">
          <data type="nonNegativeInteger"/>
        </attribute>
      </optional>
      <optional>
        <ref name="xhtml.title"/>
      </optional>
      <ref name="xhtml.content"/>
    </element>
  </define>
  <define name="xhtml.title">
    <element name="title">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.paragraph">
    <choice>
      <ref name="xhtml.text.paragraph"/>
      <ref name="xhtml.codeblock"/>
      <ref name="xhtml.image"/>
      <ref name="fw4ex.warning"/>
      <ref name="fw4ex.error"/>
    </choice>
  </define>
  <!-- =head2 image PROVISIONAL -->
  <!--
    Sometimes, it might be useful to embed an image within the grading
    report.
  -->
  <!-- =cut -->
  <define name="xhtml.image">
    <element name="img">
      <attribute name="src">
        <data type="string"/>
      </attribute>
      <optional>
        <attribute name="width">
          <data type="positiveInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="height">
          <data type="positiveInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="alt">
          <data type="string"/>
        </attribute>
      </optional>
      <empty/>
    </element>
  </define>
  <!-- =head2 xhtml.text.paragraph -->
  <!-- Be rather loose: Accept p elements within a p element. -->
  <!-- =cut -->
  <define name="xhtml.text.paragraph">
    <element name="p">
      <oneOrMore>
        <choice>
          <ref name="xhtml.inline.text"/>
          <ref name="xhtml.codeblock"/>
          <ref name="xhtml.text.paragraph"/>
          <ref name="fw4ex.warning"/>
          <ref name="fw4ex.error"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 warning -->
  <!--
    A warning may be emitted to notify a weird situation but that does
    not require to stop the grading engine. For instance, a light error
    may be corrected 'en passant' by the grading engine but notified.
  -->
  <!-- =cut -->
  <define name="fw4ex.warning">
    <element name="warning">
      <oneOrMore>
        <choice>
          <ref name="xhtml.inline.text"/>
          <ref name="xhtml.codeblock"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 error -->
  <!-- This element is used to notify an error to the student. -->
  <!-- =cut -->
  <define name="fw4ex.error">
    <element name="error">
      <oneOrMore>
        <choice>
          <ref name="xhtml.inline.text"/>
          <ref name="xhtml.codeblock"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 xhtml.codeblock -->
  <!--
    This element is used to present some code. A special stylesheet may
    address these elements. 
  -->
  <!--
    In order to present an interaction between a machine and a user, one
    may distinguish the two with the C<machine> and C<user> elements.
    Here is an example:
  -->
  <!--
      <pre>
      <machine>% </machine><user> date
      </user><machine>Thu Dec 25 15:13:30 CET 2008
      % </machine></pre>
  -->
  <!--
    NOTE: No newline character between C<machine> and C<user> tags
    within a <pre> element.
  -->
  <!-- =cut -->
  <define name="xhtml.codeblock">
    <element name="pre">
      <mixed>
        <zeroOrMore>
          <choice>
            <ref name="xhtml.code.user"/>
            <ref name="xhtml.code.machine"/>
            <ref name="xhtml.code.line.number"/>
            <ref name="fw4ex.anchor"/>
          </choice>
        </zeroOrMore>
      </mixed>
    </element>
  </define>
  <define name="xhtml.code.user">
    <element name="user">
      <text/>
    </element>
  </define>
  <define name="xhtml.code.machine">
    <element name="machine">
      <text/>
    </element>
  </define>
  <define name="xhtml.code.line.number">
    <element name="lineNumber">
      <text/>
    </element>
  </define>
  <!-- =head1 xhtml.enumeration -->
  <!-- As usual there are numbered and unnumbered enumerations. -->
  <!-- =cut -->
  <define name="xhtml.enumeration">
    <choice>
      <ref name="xhtml.ordered.enumeration"/>
      <ref name="xhtml.unordered.enumeration"/>
    </choice>
  </define>
  <define name="xhtml.ordered.enumeration">
    <element name="ol">
      <oneOrMore>
        <element name="li">
          <ref name="xhtml.inline.text"/>
        </element>
      </oneOrMore>
    </element>
  </define>
  <define name="xhtml.unordered.enumeration">
    <element name="ul">
      <oneOrMore>
        <element name="li">
          <ref name="xhtml.inline.text"/>
        </element>
      </oneOrMore>
    </element>
  </define>
  <!-- =head1 xhtml.inline.text -->
  <!--
    This element defines a text that appears within a single paragraph.
    These text fragments may be styled as in HTML, they may contain a
    partial mark stating the the student wins a number of points or they
    may contain additional information (C<fw4ex.anchor>) for the sole
    needs of the grading platform.
  -->
  <!-- =cut -->
  <define name="xhtml.inline.text">
    <mixed>
      <zeroOrMore>
        <choice>
          <ref name="xhtml.styled"/>
          <ref name="xhtml.code"/>
          <ref name="fw4ex.partial.mark"/>
          <ref name="fw4ex.anchor"/>
        </choice>
      </zeroOrMore>
    </mixed>
  </define>
  <!-- =head1 fw4ex.partial.mark -->
  <!--
    This element states that the student wins C<value> points. The same
    C<value> appears as the body of the element so it may be styled with
    some CSS. To be valid, the partial mark must contain a valid key
    known by the author but not by the student.
  -->
  <!-- =cut -->
  <define name="fw4ex.partial.mark">
    <element name="mark">
      <attribute name="key">
        <data type="NMTOKEN"/>
      </attribute>
      <attribute name="value">
        <data type="decimal"/>
      </attribute>
      <data type="decimal"/>
    </element>
  </define>
  <define name="xhtml.styled">
    <choice>
      <ref name="xhtml.emph"/>
      <ref name="xhtml.bold"/>
      <ref name="xhtml.sub"/>
      <ref name="xhtml.sup"/>
      <ref name="xhtml.anchor"/>
      <ref name="fw4ex.warning"/>
      <ref name="fw4ex.error"/>
      <ref name="xhtml.normal"/>
    </choice>
  </define>
  <!-- Italics as in HTML or LaTeX: -->
  <define name="xhtml.emph">
    <choice>
      <ref name="xhtml.emph.em"/>
      <ref name="xhtml.emph.it"/>
      <ref name="xhtml.emph.i"/>
    </choice>
  </define>
  <define name="xhtml.emph.em">
    <element name="em">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.emph.it">
    <element name="it">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.emph.i">
    <element name="i">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.sub">
    <element name="sub">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.sup">
    <element name="sup">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <!-- Bold as in HTML or LaTeX: -->
  <define name="xhtml.bold">
    <choice>
      <ref name="xhtml.bold.strong"/>
      <ref name="xhtml.bold.b"/>
    </choice>
  </define>
  <define name="xhtml.bold.strong">
    <element name="strong">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.bold.b">
    <element name="b">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.normal">
    <element name="normal">
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.code">
    <element name="code">
      <text/>
    </element>
  </define>
  <define name="xhtml.anchor">
    <element name="a">
      <group>
        <attribute name="href">
          <data type="anyURI"/>
        </attribute>
        <ref name="xhtml.inline.text"/>
      </group>
      <!-- no inner <a> -->
    </element>
  </define>
  <!-- =head1 xhtml.comparison (NOT YET IMPLEMENTED) -->
  <!--
    May be used in some future when student's and teacher's texts must
    be compared. Some javascript may be used to stress the differences.
  -->
  <!-- =cut -->
  <define name="xhtml.comparison">
    <element name="comparison">
      <element name="student">
        <ref name="xhtml.paragraph"/>
      </element>
      <element name="teacher">
        <ref name="xhtml.paragraph"/>
      </element>
    </element>
  </define>
  <!-- =head1 xhtml.file.annotation -->
  <!--
    This element gathers annotations with respect to a student's file.
    An annotation has a kind (a short word telling which type of
    annotation it is. From this an icon may also be inferred) and an
    associated text. 
  -->
  <!--
    Annotations annotate part of the student's file. They may be hooked
    at a precise location (specified by a line and a column) or be
    associated to a region of the file.
  -->
  <!-- =cut -->
  <define name="xhtml.file.annotation">
    <element name="annotations">
      <attribute name="studentfilename">
        <data type="string"/>
      </attribute>
      <zeroOrMore>
        <ref name="xhtml.annotation"/>
      </zeroOrMore>
      <optional>
        <!-- an overall comment for the whole file: -->
        <ref name="xhtml.inline.text"/>
      </optional>
    </element>
  </define>
  <define name="xhtml.annotation">
    <choice>
      <ref name="xhtml.line.annotation"/>
      <ref name="xhtml.region.annotation"/>
    </choice>
  </define>
  <define name="xhtml.line.annotation">
    <element name="annotation">
      <attribute name="kind">
        <data type="NMTOKEN"/>
      </attribute>
      <attribute name="line">
        <data type="nonNegativeInteger"/>
      </attribute>
      <attribute name="column">
        <data type="nonNegativeInteger"/>
      </attribute>
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <define name="xhtml.region.annotation">
    <element name="annotation">
      <attribute name="kind">
        <data type="NMTOKEN"/>
      </attribute>
      <attribute name="start-line">
        <data type="nonNegativeInteger"/>
      </attribute>
      <attribute name="start-column">
        <data type="nonNegativeInteger"/>
      </attribute>
      <attribute name="stop-line">
        <data type="nonNegativeInteger"/>
      </attribute>
      <attribute name="stop-column">
        <data type="nonNegativeInteger"/>
      </attribute>
      <ref name="xhtml.inline.text"/>
    </element>
  </define>
  <!-- =head1 fw4ex.anchor -->
  <!--
    These elements are reserved for the FW4EX platform. They are used to
    comment the grading process and to tidy up the generated xhtml. This
    is often useful since bash lacks a try-catch-finally feature so it
    is difficult to ensure that all opening tags do have their
    associated closing tags.
  -->
  <!-- =cut -->
  <define name="fw4ex.anchor">
    <element name="FW4EX">
      <optional>
        <attribute name="phase">
          <choice>
            <value>begin</value>
            <value>end</value>
          </choice>
        </attribute>
      </optional>
      <attribute name="what">
        <data type="string"/>
      </attribute>
      <optional>
        <attribute name="when">
          <data type="dateTime"/>
        </attribute>
      </optional>
      <empty/>
    </element>
  </define>
</grammar>
<!-- =head1 Final notes -->
<!-- C<xsd:dateTime> is C<CCYY-MM-DDThh:mm:ssZ> -->
<!-- =cut -->
<!-- end. -->
